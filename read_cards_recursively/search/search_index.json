{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Cards","text":"<p>Project Cards represent information about a tranportation infrastructure projects sufficient for usage in a regional travel demand model.</p>"},{"location":"#schema","title":"Schema","text":"<p>The ProjectCard schema is represented as a json-schema in the <code>/schema</code> directory.  More details:  json-schemas page.</p>"},{"location":"#pydantic-data-models","title":"Pydantic Data Models","text":"<p>If you are working in a python environment, you might find it easier to use the pydantic data models which are synced to the json-schema.  More details: pydantic-datamodels page.</p>"},{"location":"#example-data","title":"Example Data","text":"<p>Example project cards can be found in the <code>/examples</code> directory and on the examples page</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>This package should generally be used to validate or update project cards.  </p> <p>There is also a limited object model, <code>ProjectCard</code> which can be used to organize and manage project cards.</p>"},{"location":"#command-line","title":"Command Line","text":"<p>Validate project card(s) from a directory or specific file path, optionally filtering by a tag.</p> <pre><code>validate_card card_search_dir --filter_tags ['tag_to_search_for']\n</code></pre> <p>Update older project card(s) to current format from a directory or specific file path.  Cards should still be validated afterwards.</p> <pre><code>update_projectcard_schema card_search_dir output_dir\n</code></pre>"},{"location":"#python-api","title":"Python API","text":"<pre><code>from projectcard.io import read_cards\n\n# Read in cards from a directory with the tag \"Baseline 2030\"\nproject_cards = read_cards(directory, filter_tags=[\"Baseline2030\"])\n\n# Iterate through a deck of cards for validity\nfor project_name,card in project_cards.items():\n    print(f\"{project_name}: {card.valid}\")\n\n# Print out a summary of the card with the project name \"4th Ave Busway\"\nprint(project_cards[\"4th Ave Busway\"])\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install projectcard</code></p> <p>Note</p> <p>It is not generally necessary to install the projectcard package yourself unless you are using it to do independent validation of project cards. Projects such as <code>network_wrangler</code> that use the <code>projectcard</code> package to validate project cards usually include <code>projectcard</code> as a requirement and install it on their own.</p> <p>Plan on developing in network wrangler?</p> <p>You might want to follow the directions in the development documentation.</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code>from projectcard.io import read_cards\n\n# Read in cards from a directory with the tag \"Baseline 2030\"\nproject_cards = read_cards(directory, filter_tags=[\"Baseline2030\"])\n\n# Iterate through a deck of cards for validity\nfor project_name,card in project_cards.items():\n    print(f\"{project_name}: {card.valid}\")\n\n# Print out a summary of the card with the project name \"4th Ave Busway\"\nprint(project_cards[\"4th Ave Busway\"])\n</code></pre> <p>Project Card class for project card data schema.</p> <p>Functions for reading and writing project cards.</p> <p>Validates ProjectCard JSON data against a JSON schema.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard","title":"<code>ProjectCard</code>","text":"<p>               Bases: <code>object</code></p> <p>Representation of a Project Card.</p> <p>Attributes:</p> Name Type Description <code>__dict__</code> <p>Dictionary of project card attributes</p> <code>valid</code> <code>bool</code> <p>Boolean indicating if data conforms to project card data schema</p> <code>facilities</code> <code>list[dict]</code> <p>List of all facility objects in project card</p> <code>facility</code> <code>Union[str, dict]</code> <p>either singular facility in project card or the string \u201cmultiple\u201d</p> <code>all_property_changes</code> <code>Union[str, dict]</code> <p>List of all property_changes objects in project card</p> <code>property_changes</code> <code>Union[str, dict]</code> <p>either singular property_changes in project card or the string \u201cmultiple\u201d</p> <code>change_types</code> <code>List[str]</code> <p>List of all project types in project card</p> <code>change_type</code> <code>str</code> <p>either singular project type in project card or the string \u201cmultiple\u201d</p> <code>sub_projects</code> <code>str</code> <p>list of sub_project objects</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>class ProjectCard(object):\n    \"\"\"Representation of a Project Card.\n\n    Attributes:\n        __dict__: Dictionary of project card attributes\n        valid: Boolean indicating if data conforms to project card data schema\n        facilities: List of all facility objects in project card\n        facility: either singular facility in project card or the string \"multiple\"\n        all_property_changes: List of all property_changes objects in project card\n        property_changes: either singular property_changes in project card or the string \"multiple\"\n        change_types: List of all project types in project card\n        change_type: either singular project type in project card or the string \"multiple\"\n        sub_projects: list of sub_project objects\n    \"\"\"\n\n    def __init__(self, attribute_dictonary: dict):\n        \"\"\"Constructor for ProjectCard object.\n\n        Args:\n            attribute_dictonary: a nested dictionary of attributes\n        \"\"\"\n        # add these first so they are first on write out\n        self.project: str = None\n        self.tags: list[str] = []\n        self.dependencies: dict = {}\n        self.notes: str = \"\"\n        self._sub_projects: list[SubProject] = []\n\n        self.__dict__.update(attribute_dictonary)\n        for sp in self.__dict__.get(\"changes\", []):\n            sp_obj = SubProject(sp, self)\n            self._sub_projects.append(sp_obj)\n\n    def __str__(self):\n        \"\"\"String representation of project card.\"\"\"\n        s = [\"{}: {}\".format(key, value) for key, value in self.__dict__.items()]\n        return \"\\n\".join(s)\n\n    def validate(self) -&gt; bool:\n        \"\"\"Return True if project card is valid, False otherwise.\"\"\"\n        return validate_card(self.__dict__)\n\n    @property\n    def dict(self) -&gt; dict:\n        \"\"\"Return dictionary of public project card attributes.\"\"\"\n        return {k: v for k, v in self.__dict__.items() if not k.startswith(\"_\") and v is not None}\n\n    @property\n    def valid(self) -&gt; bool:\n        \"\"\"Return True if project card is valid, False otherwise.\"\"\"\n        try:\n            self.validate()\n        except ProjectCardValidationError as e:\n            CardLogger.error(f\"Project {self.project} is not valid: {e}\")\n            return False\n        return True\n\n    @property\n    def facilities(self) -&gt; list[dict]:\n        \"\"\"Return all facilities from project card as list of dicts.\"\"\"\n        if any([\"transit\" in t for t in self.change_types]):\n            CardLogger.warning(\"Transit project doesn't have services.\")\n            return []\n        f = list(_findkeys(self.__dict__, \"facility\"))\n        if not f:\n            raise ProjectCardValidationError(\"Couldn't find facility in project card\")\n        return f\n\n    @property\n    def facility(self) -&gt; Union[str, dict]:\n        \"\"\"Return facility part of project card or \"multiple\" if more than one.\"\"\"\n        f = self.facilities\n        if len(f) &gt; 1:\n            return \"multiple\"\n        return f[0]\n\n    @property\n    def services(self) -&gt; List[dict]:\n        \"\"\"Return all services from project card as list of dicts.\"\"\"\n        if any([\"roadway\" in t for t in self.change_types]):\n            CardLogger.warning(\"Roadway project doesn't have services.\")\n            return []\n        s = list(_findkeys(self.__dict__, \"service\"))\n        if not s:\n            raise ProjectCardValidationError(\"Couldn't find service in project card\")\n        return s\n\n    @property\n    def service(self) -&gt; Union[str, dict]:\n        \"\"\"Return service part of from project card or \"multiple\" if more than one.\"\"\"\n        s = self.services\n        if len(s) &gt; 1:\n            return \"multiple\"\n        return s[0]\n\n    @property\n    def all_transit_property_changes(self) -&gt; List[dict]:\n        \"\"\"Return all transit property changes from project card.\"\"\"\n        if not any([\"transit_property_change\" in t for t in self.change_types]):\n            CardLogger.warning(f\"Project {self.project} doesn't have transit property changes.\")\n            return []\n        tp = list(_findkeys(self.__dict__, \"transit_property_change\"))\n        p = [i[\"property_changes\"] for i in tp]\n        return p\n\n    @property\n    def transit_property_change(self) -&gt; Union[str, dict]:\n        \"\"\"Return transit property change from project card or \"multiple if more than one.\"\"\"\n        p = self.all_transit_property_changes\n        if len(p) &gt; 1:\n            return \"multiple\"\n        return p[0]\n\n    @property\n    def all_transit_routing_changes(self) -&gt; List[dict]:\n        \"\"\"Return all transit routing changes from project card.\"\"\"\n        if not any([\"transit_routing_change\" in t for t in self.change_types]):\n            CardLogger.warning(f\"Project {self.project} doesn't have routing changes.\")\n            return []\n        r = list(_findkeys(self.__dict__, \"routing\"))\n        CardLogger.debug(f\"transit routing change: {r}\")\n        return r\n\n    @property\n    def transit_routing_change(self) -&gt; Union[str, dict]:\n        \"\"\"Return transit routing change from project card.\"\"\"\n        p = self.all_transit_routing_changes\n        if len(p) &gt; 1:\n            return \"multiple\"\n        return p[0]\n\n    @property\n    def change_types(self) -&gt; List[str]:\n        \"\"\"Returns list of all change types from project/subproject.\"\"\"\n        if self._sub_projects:\n            return [sp.change_type for sp in self._sub_projects]\n\n        type_keys = [k for k in self.__dict__.keys() if k in CHANGE_TYPES]\n        if not type_keys:\n            raise ProjectCardValidationError(f\"Couldn't find type of project card {self.project}\")\n        return type_keys\n\n    @property\n    def change_type(self) -&gt; str:\n        \"\"\"Return single change type if single project or \"multiple\" if &gt;1 subproject.\"\"\"\n        t = self.change_types\n        if len(t) &gt; 1:\n            return \"multiple\"\n        return t[0]\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.all_transit_property_changes","title":"<code>all_transit_property_changes: List[dict]</code>  <code>property</code>","text":"<p>Return all transit property changes from project card.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.all_transit_routing_changes","title":"<code>all_transit_routing_changes: List[dict]</code>  <code>property</code>","text":"<p>Return all transit routing changes from project card.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.change_type","title":"<code>change_type: str</code>  <code>property</code>","text":"<p>Return single change type if single project or \u201cmultiple\u201d if &gt;1 subproject.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.change_types","title":"<code>change_types: List[str]</code>  <code>property</code>","text":"<p>Returns list of all change types from project/subproject.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.dict","title":"<code>dict: dict</code>  <code>property</code>","text":"<p>Return dictionary of public project card attributes.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.facilities","title":"<code>facilities: list[dict]</code>  <code>property</code>","text":"<p>Return all facilities from project card as list of dicts.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.facility","title":"<code>facility: Union[str, dict]</code>  <code>property</code>","text":"<p>Return facility part of project card or \u201cmultiple\u201d if more than one.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.service","title":"<code>service: Union[str, dict]</code>  <code>property</code>","text":"<p>Return service part of from project card or \u201cmultiple\u201d if more than one.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.services","title":"<code>services: List[dict]</code>  <code>property</code>","text":"<p>Return all services from project card as list of dicts.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.transit_property_change","title":"<code>transit_property_change: Union[str, dict]</code>  <code>property</code>","text":"<p>Return transit property change from project card or \u201cmultiple if more than one.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.transit_routing_change","title":"<code>transit_routing_change: Union[str, dict]</code>  <code>property</code>","text":"<p>Return transit routing change from project card.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.valid","title":"<code>valid: bool</code>  <code>property</code>","text":"<p>Return True if project card is valid, False otherwise.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.__init__","title":"<code>__init__(attribute_dictonary)</code>","text":"<p>Constructor for ProjectCard object.</p> <p>Parameters:</p> Name Type Description Default <code>attribute_dictonary</code> <code>dict</code> <p>a nested dictionary of attributes</p> required Source code in <code>projectcard/projectcard.py</code> <pre><code>def __init__(self, attribute_dictonary: dict):\n    \"\"\"Constructor for ProjectCard object.\n\n    Args:\n        attribute_dictonary: a nested dictionary of attributes\n    \"\"\"\n    # add these first so they are first on write out\n    self.project: str = None\n    self.tags: list[str] = []\n    self.dependencies: dict = {}\n    self.notes: str = \"\"\n    self._sub_projects: list[SubProject] = []\n\n    self.__dict__.update(attribute_dictonary)\n    for sp in self.__dict__.get(\"changes\", []):\n        sp_obj = SubProject(sp, self)\n        self._sub_projects.append(sp_obj)\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.__str__","title":"<code>__str__()</code>","text":"<p>String representation of project card.</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of project card.\"\"\"\n    s = [\"{}: {}\".format(key, value) for key, value in self.__dict__.items()]\n    return \"\\n\".join(s)\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.validate","title":"<code>validate()</code>","text":"<p>Return True if project card is valid, False otherwise.</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>def validate(self) -&gt; bool:\n    \"\"\"Return True if project card is valid, False otherwise.\"\"\"\n    return validate_card(self.__dict__)\n</code></pre>"},{"location":"api/#projectcard.projectcard.SubProject","title":"<code>SubProject</code>","text":"<p>               Bases: <code>ProjectCard</code></p> <p>Representation of a SubProject within a ProjectCard.</p> <p>Attributes:</p> Name Type Description <code>parent_project</code> <code>str</code> <p>reference to parent ProjectCard object</p> <code>type</code> <code>str</code> <p>project type</p> <code>tags</code> <code>str</code> <p>reference to parent project card tags</p> <code>dependencies</code> <code>str</code> <p>reference to parent project card\u2019s dependencies</p> <code>project</code> <code>str</code> <p>reference to the name of the parent project card\u2019s name</p> <code>facility</code> <code>dict</code> <p>facility selection dictionary</p> <code>property_changes</code> <code>dict</code> <p>property_changes dictionary</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>class SubProject(ProjectCard):\n    \"\"\"Representation of a SubProject within a ProjectCard.\n\n    Attributes:\n        parent_project: reference to parent ProjectCard object\n        type:  project type\n        tags: reference to parent project card tags\n        dependencies: reference to parent project card's dependencies\n        project: reference to the name of the parent project card's name\n        facility: facility selection dictionary\n        property_changes:property_changes dictionary\n    \"\"\"\n\n    def __init__(self, sp_dictionary: dict, parent_project: ProjectCard):\n        \"\"\"Constructor for SubProject object.\n\n        Args:\n            sp_dictionary (dict): dictionary of sub-project attributes contained within \"changes\"\n                list of parent projet card\n            parent_project (ProjectCard): ProjectCard object for parent project card\n        \"\"\"\n        self._parent_project = parent_project\n\n        if not len(sp_dictionary) == 1:\n            CardLogger.debug(f\"Invalid sp_dictionary with !=1 keys: {sp_dictionary.keys()}\")\n            raise SubprojectValidationError(\n                f\"Subproject of {parent_project.project} \\\n                 should only have one change. Did you forget to indent the rest of this change?.\"\n            )\n        self._change_type = list(sp_dictionary.keys())[0]\n        self.__dict__.update(sp_dictionary)\n        self._sub_projects = []\n\n    @property\n    def change_type(self) -&gt; str:\n        \"\"\"Return change type from subproject.\"\"\"\n        return self._change_type\n\n    @property\n    def parent_project(self) -&gt; str:\n        \"\"\"Return parent project from parent project card.\"\"\"\n        return self._parent_project\n\n    @property\n    def project(self) -&gt; str:\n        \"\"\"Return project name from parent project card.\"\"\"\n        return self._parent_project.project\n\n    @property\n    def dependencies(self) -&gt; str:\n        \"\"\"Return dependencies from parent project card.\"\"\"\n        return self._parent_project.dependencies\n\n    @property\n    def tags(self) -&gt; str:\n        \"\"\"Return tags from parent project card.\"\"\"\n        return self._parent_project.tags\n\n    @property\n    def facility(self) -&gt; dict:\n        \"\"\"Return facility dictionary from subproject.\"\"\"\n        if \"facility\" not in self.__dict__:\n            raise SubprojectValidationError(\n                f\"Couldn't find facility in subproject in project card\\\n                                            {self._parent_project.project}\"\n            )\n        return self.__dict__[\"facility\"]\n\n    @property\n    def valid(self) -&gt; bool:\n        \"\"\"Check if subproject is valid.\"\"\"\n        return self._parent_project.valid\n</code></pre>"},{"location":"api/#projectcard.projectcard.SubProject.change_type","title":"<code>change_type: str</code>  <code>property</code>","text":"<p>Return change type from subproject.</p>"},{"location":"api/#projectcard.projectcard.SubProject.dependencies","title":"<code>dependencies: str</code>  <code>property</code>","text":"<p>Return dependencies from parent project card.</p>"},{"location":"api/#projectcard.projectcard.SubProject.facility","title":"<code>facility: dict</code>  <code>property</code>","text":"<p>Return facility dictionary from subproject.</p>"},{"location":"api/#projectcard.projectcard.SubProject.parent_project","title":"<code>parent_project: str</code>  <code>property</code>","text":"<p>Return parent project from parent project card.</p>"},{"location":"api/#projectcard.projectcard.SubProject.project","title":"<code>project: str</code>  <code>property</code>","text":"<p>Return project name from parent project card.</p>"},{"location":"api/#projectcard.projectcard.SubProject.tags","title":"<code>tags: str</code>  <code>property</code>","text":"<p>Return tags from parent project card.</p>"},{"location":"api/#projectcard.projectcard.SubProject.valid","title":"<code>valid: bool</code>  <code>property</code>","text":"<p>Check if subproject is valid.</p>"},{"location":"api/#projectcard.projectcard.SubProject.__init__","title":"<code>__init__(sp_dictionary, parent_project)</code>","text":"<p>Constructor for SubProject object.</p> <p>Parameters:</p> Name Type Description Default <code>sp_dictionary</code> <code>dict</code> <p>dictionary of sub-project attributes contained within \u201cchanges\u201d list of parent projet card</p> required <code>parent_project</code> <code>ProjectCard</code> <p>ProjectCard object for parent project card</p> required Source code in <code>projectcard/projectcard.py</code> <pre><code>def __init__(self, sp_dictionary: dict, parent_project: ProjectCard):\n    \"\"\"Constructor for SubProject object.\n\n    Args:\n        sp_dictionary (dict): dictionary of sub-project attributes contained within \"changes\"\n            list of parent projet card\n        parent_project (ProjectCard): ProjectCard object for parent project card\n    \"\"\"\n    self._parent_project = parent_project\n\n    if not len(sp_dictionary) == 1:\n        CardLogger.debug(f\"Invalid sp_dictionary with !=1 keys: {sp_dictionary.keys()}\")\n        raise SubprojectValidationError(\n            f\"Subproject of {parent_project.project} \\\n             should only have one change. Did you forget to indent the rest of this change?.\"\n        )\n    self._change_type = list(sp_dictionary.keys())[0]\n    self.__dict__.update(sp_dictionary)\n    self._sub_projects = []\n</code></pre>"},{"location":"api/#projectcard.io.ProjectCardReadError","title":"<code>ProjectCardReadError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Error in reading project card.</p> Source code in <code>projectcard/io.py</code> <pre><code>class ProjectCardReadError(Exception):\n    \"\"\"Error in reading project card.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.io.read_card","title":"<code>read_card(filepath, validate=False)</code>","text":"<p>Read single project card from a path and return project card object.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>file where the project card is.</p> required <code>validate</code> <code>bool</code> <p>if True, will validate the project card schemea</p> <code>False</code> Source code in <code>projectcard/io.py</code> <pre><code>def read_card(filepath: str, validate: bool = False):\n    \"\"\"Read single project card from a path and return project card object.\n\n    Args:\n        filepath: file where the project card is.\n        validate: if True, will validate the project card schemea\n    \"\"\"\n    if not Path(filepath).is_file():\n        raise FileNotFoundError(f\"Cannot find project card file: {filepath}\")\n    card_dict = read_cards(filepath, _cards={})\n    card = list(card_dict.values())[0]\n    if validate:\n        assert card.valid\n    return card\n</code></pre>"},{"location":"api/#projectcard.io.read_cards","title":"<code>read_cards(filepath, filter_tags=[], recursive=False, _cards={})</code>","text":"<p>Reads collection of project card files by inferring the file type.</p> <p>Lowercases all keys, but then replaces any that need to be uppercased using the REPLACE_KEYS mapping.  Needed to keep \u201cA\u201d and \u201cB\u201d uppercased.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[Collection[str], str]</code> <p>where the project card is.  A single path, list of paths, a directory, or a glob pattern.</p> required <code>filter_tags</code> <code>Collection[str]</code> <p>list of tags to filter by.</p> <code>[]</code> <code>recursive</code> <code>bool</code> <p>if True, will search recursively in subdirs.</p> <code>False</code> <code>_cards</code> <code>Mapping[str, ProjectCard]</code> <p>dictionary of project cards to add to. Should not be used by user.</p> <code>{}</code> Source code in <code>projectcard/io.py</code> <pre><code>def read_cards(\n    filepath: Union[Collection[str], str],\n    filter_tags: Collection[str] = [],\n    recursive: bool = False,\n    _cards: Mapping[str, ProjectCard] = {},\n) -&gt; Mapping[str, ProjectCard]:\n    \"\"\"Reads collection of project card files by inferring the file type.\n\n    Lowercases all keys, but then replaces any that need to be uppercased using the\n    REPLACE_KEYS mapping.  Needed to keep \"A\" and \"B\" uppercased.\n\n    Args:\n        filepath: where the project card is.  A single path, list of paths,\n            a directory, or a glob pattern.\n        filter_tags: list of tags to filter by.\n        recursive: if True, will search recursively in subdirs.\n        _cards: dictionary of project cards to add to. Should not be used by user.\n\n    Returns: dictionary of project cards by project name\n    \"\"\"\n    CardLogger.debug(f\"Reading cards from {filepath}.\")\n\n    filter_tags = list(map(str.lower, filter_tags))\n    if isinstance(filepath, list) or not os.path.isfile(filepath):\n        _card_paths = _get_cardpath_list(\n            filepath, valid_ext=_read_method_map.keys(), recursive=recursive\n        )\n        for p in _card_paths:\n            _cards.update(read_cards(p, filter_tags=filter_tags, _cards=_cards))\n        return _cards\n\n    _ext = os.path.splitext(filepath)[1]\n    if _ext not in _read_method_map.keys():\n        CardLogger.debug(f\"Unsupported file type for file {filepath}\")\n        raise ProjectCardReadError(f\"Unsupported file type: {_ext}\")\n    _card_dict = _read_method_map[_ext](filepath)\n    for k in SKIP_READ:\n        if k in _card_dict:\n            del _card_dict[k]\n    _card_dict = {k: v for k, v in _card_dict.items() if v is not None}\n    _card_dict = _change_keys(_card_dict)\n    _card_dict[\"file\"] = filepath\n    _project_name = _card_dict[\"project\"].lower()\n    if _project_name in _cards:\n        raise ProjectCardReadError(\n            f\"Names not unique from existing scenario projects: {_project_name}\"\n        )\n    if filter_tags and set(list(map(str.lower, _card_dict.get(\"tags\", [])))).isdisjoint(\n        set(filter_tags)\n    ):\n        CardLogger.debug(f\"Skipping {_project_name} - no overlapping tags with {filter_tags}.\")\n        return _cards\n    _cards[_project_name] = ProjectCard(_card_dict)\n\n    return _cards\n</code></pre>"},{"location":"api/#projectcard.io.write_card","title":"<code>write_card(project_card, filename=None)</code>","text":"<p>Writes project card dictionary to YAML file.</p> Source code in <code>projectcard/io.py</code> <pre><code>def write_card(project_card, filename: str = None):\n    \"\"\"Writes project card dictionary to YAML file.\"\"\"\n    if not filename:\n        filename = _make_slug(project_card.project) + \".yml\"\n    if not project_card.valid:\n        CardLogger.warning(f\"{project_card.project} Project Card not valid.\")\n    out_dict = {}\n\n    # Writing these first manually so that they are at top of file\n    out_dict[\"project\"] = None\n    if project_card.dict.get(\"tags\"):\n        out_dict[\"tags\"] = None\n    if project_card.dict.get(\"dependencies\"):\n        out_dict[\"dependencies\"] = None\n    out_dict.update(project_card.dict)\n    for k in SKIP_WRITE:\n        if k in out_dict:\n            del out_dict[k]\n\n    with open(filename, \"w\") as outfile:\n        yaml.dump(out_dict, outfile, default_flow_style=False, sort_keys=False)\n\n    CardLogger.info(\"Wrote project card to: {}\".format(filename))\n</code></pre>"},{"location":"api/#projectcard.validate.ProjectCardJSONSchemaError","title":"<code>ProjectCardJSONSchemaError</code>","text":"<p>               Bases: <code>SchemaError</code></p> <p>Error in the ProjectCard json schema.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class ProjectCardJSONSchemaError(SchemaError):\n    \"\"\"Error in the ProjectCard json schema.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.ProjectCardValidationError","title":"<code>ProjectCardValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Error in formatting of ProjectCard.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class ProjectCardValidationError(ValidationError):\n    \"\"\"Error in formatting of ProjectCard.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.PycodeError","title":"<code>PycodeError</code>","text":"<p>               Bases: <code>ProjectCardValidationError</code></p> <p>Basic runtime error in python code.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class PycodeError(ProjectCardValidationError):\n    \"\"\"Basic runtime error in python code.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.SubprojectValidationError","title":"<code>SubprojectValidationError</code>","text":"<p>               Bases: <code>ProjectCardValidationError</code></p> <p>Error in formatting of Subproject.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class SubprojectValidationError(ProjectCardValidationError):\n    \"\"\"Error in formatting of Subproject.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.package_schema","title":"<code>package_schema(schema_path=PROJECTCARD_SCHEMA, outfile_path=None)</code>","text":"<p>Consolidates referenced schemas into a single schema and writes it out.</p> <p>Parameters:</p> Name Type Description Default <code>schema_path</code> <code>Union[Path, str]</code> <p>Schema to read int and package. Defaults to PROJECTCARD_SCHEMA which is  ROOTDIR / \u201cschema\u201d / \u201cprojectcard.json\u201d.</p> <code>PROJECTCARD_SCHEMA</code> <code>outfile_path</code> <code>Union[Path, str]</code> <p>Where to write out packaged schema. Defaults to schema_path.basepath.packaged.json</p> <code>None</code> Source code in <code>projectcard/validate.py</code> <pre><code>def package_schema(\n    schema_path: Union[Path, str] = PROJECTCARD_SCHEMA,\n    outfile_path: Union[Path, str] = None,\n) -&gt; None:\n    \"\"\"Consolidates referenced schemas into a single schema and writes it out.\n\n    Args:\n        schema_path: Schema to read int and package. Defaults to PROJECTCARD_SCHEMA which is\n             ROOTDIR / \"schema\" / \"projectcard.json\".\n        outfile_path: Where to write out packaged schema. Defaults\n            to schema_path.basepath.packaged.json\n    \"\"\"\n    schema_path = Path(schema_path)\n    _s_data = _load_schema(schema_path)\n    if outfile_path is None:\n        outfile_path = schema_path.parent / f\"{schema_path.stem}packaged.{schema_path.suffix}\"\n    outfile_path = Path(outfile_path)\n    with open(outfile_path, \"w\") as outfile:\n        json.dump(_s_data, outfile, indent=4)\n    CardLogger.info(f\"Wrote {schema_path.stem} to {outfile_path.stem}\")\n</code></pre>"},{"location":"api/#projectcard.validate.validate_card","title":"<code>validate_card(jsondata, schema_path=PROJECTCARD_SCHEMA)</code>","text":"<p>Validates json-like data to specified schema.</p> <p>If <code>pycode</code> key exists, will evaluate it for basic runtime errors using Flake8. Note: will not flag any invalid use of RoadwayNetwork or TransitNetwork APIs.</p> <p>Parameters:</p> Name Type Description Default <code>jsondata</code> <code>dict</code> <p>json-like data to validate.</p> required <code>schema_path</code> <code>Union[str, Path]</code> <p>path to schema to validate to. Defaults to PROJECTCARD_SCHEMA which is ROOTDIR / \u201cschema\u201d / \u201cprojectcard.json\u201d</p> <code>PROJECTCARD_SCHEMA</code> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If jsondata doesn\u2019t conform to specified schema.</p> <code>SchemaError</code> <p>If schema itself is not valid.</p> Source code in <code>projectcard/validate.py</code> <pre><code>def validate_card(jsondata: dict, schema_path: Union[str, Path] = PROJECTCARD_SCHEMA) -&gt; bool:\n    \"\"\"Validates json-like data to specified schema.\n\n    If `pycode` key exists, will evaluate it for basic runtime errors using Flake8.\n    Note: will not flag any invalid use of RoadwayNetwork or TransitNetwork APIs.\n\n    Args:\n        jsondata: json-like data to validate.\n        schema_path: path to schema to validate to.\n            Defaults to PROJECTCARD_SCHEMA which is\n            ROOTDIR / \"schema\" / \"projectcard.json\"\n\n    Raises:\n        ValidationError: If jsondata doesn't conform to specified schema.\n        SchemaError: If schema itself is not valid.\n    \"\"\"\n    CardLogger.debug(f\"Validating: {jsondata['project']}\")\n    try:\n        _schema_data = _load_schema(schema_path)\n        validate(jsondata, schema=_schema_data)\n    except ValidationError as e:\n        CardLogger.error(f\"---- Error validating {jsondata['project']} ----\")\n        msg = f\"\\nRelevant schema: {e.schema}\\nValidator Value: {e.validator_value}\\nValidator: {e.validator}\"\n        msg += f\"\\nabsolute_schema_path:{e.absolute_schema_path}\\nabsolute_path:{e.absolute_path}\"\n        CardLogger.error(msg)\n        raise ProjectCardValidationError(f\"{e}\")\n    except SchemaError as e:\n        CardLogger.error(e)\n        raise ProjectCardJSONSchemaError(f\"{e}\")\n\n    if \"pycode\" in jsondata:\n        if \"self.\" in jsondata[\"pycode\"]:\n            if \"self_obj_type\" not in jsondata:\n                raise PycodeError(\n                    \"If using self, must specify what `self` refers to in yml frontmatter using self_obj_type: &lt;RoadwayNetwork|TransitNetwork&gt;\"\n                )\n        _validate_pycode(jsondata)\n\n    return True\n</code></pre>"},{"location":"api/#projectcard.validate.validate_schema_file","title":"<code>validate_schema_file(schema_path=PROJECTCARD_SCHEMA)</code>","text":"<p>Validates that a schema file is a valid JSON-schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_path</code> <code>Union[Path, str]</code> <p>description. Defaults to PROJECTCARD_SCHEMA which is ROOTDIR / \u201cschema\u201d / \u201cprojectcard.json\u201d.</p> <code>PROJECTCARD_SCHEMA</code> Source code in <code>projectcard/validate.py</code> <pre><code>def validate_schema_file(schema_path: Union[Path, str] = PROJECTCARD_SCHEMA) -&gt; bool:\n    \"\"\"Validates that a schema file is a valid JSON-schema.\n\n    Args:\n        schema_path: _description_. Defaults to PROJECTCARD_SCHEMA which is\n            ROOTDIR / \"schema\" / \"projectcard.json\".\n    \"\"\"\n    try:\n        _schema_data = _load_schema(schema_path)\n        # _resolver = _ref_resolver(schema_path,_schema_data)\n        validate({}, schema=_schema_data)  # ,resolver=_resolver)\n    except ValidationError:\n        pass\n    except SchemaError as e:\n        CardLogger.error(e)\n        raise ProjectCardJSONSchemaError(f\"{e}\")\n\n    return True\n</code></pre>"},{"location":"development/","title":"Development","text":""},{"location":"development/#development-environment","title":"Development Environment","text":"<p>If you plan on developing and changing code within the <code>projectcard</code> project, you will likely want to set up your own development environment from a cloned fork.</p> <p>Helpful prerequisites:</p> <ul> <li>github desktop</li> <li>conda</li> <li>VS Code (or another IDE)</li> </ul> <p>Fork and Install:</p> <ol> <li> <p>Fork and clone repo locally</p> gh cligithub ux <pre><code>gh repo fork network-wrangler/projectcard --clone=true\ncd projectcard\ngit remote add upstream https://github.com/network-wrangler/projectcard.git\n</code></pre> <ul> <li>In browser, fork the repository to your github account: https://github.com/network-wrangler/projectcard/fork.</li> <li>In the browser with your new fork, click green <code>code</code> botton and clone to local disk using Github Desktop.</li> <li>Add the original repo to your upstream remotes to be able to track changes:</li> <li>Make sure the cloned repository is open in GitHub Desktop</li> <li>Click on <code>Repository</code> in the menu bar</li> <li>Select Open in Terminal (or Open in Git Bash on Windows).</li> <li>In the terminal window that opens, enter the following command to add the original repository as a remote named upstream:     <pre><code>git remote add upstream https://github.com/network-wrangler/projectcard.git\n</code></pre></li> </ul> </li> <li> <p>Install dependencies</p> conda (recommended)pip <pre><code>conda install --yes --file requirements.txt\n</code></pre> <pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Install from working directory</p> <pre><code>pip install -e .\n</code></pre> </li> </ol>"},{"location":"development/#keeping-your-fork-updated","title":"Keeping your fork updated","text":"<p>To make sure any development and work you are doing takes advantage of and is compatable with the main projectcard repository, you will want to fetch and merge updates.</p> Using Github DesktopIn terminal <p>Click on Fetch origin in the top bar of GitHub Desktop to fetch the latest changes from your fork.</p> <p>Open the repository in the terminal and run the following command to fetch updates from the upstream repository and merge the udpates into your local branch.</p> <pre><code>git fetch upstream\ngit merge upstream/main\n</code></pre> <p>Replace main with the branch of the repository you want to develop towards if it is different.</p>"},{"location":"development/#style-guide","title":"Style Guide","text":"<ul> <li>All public modules and functions should be documented using google-style docstrings.</li> <li>Public modules should be documented with usage examples.</li> <li>Public functions should be covered by a test, located in the <code>/tests</code> folder.</li> <li>Code should be formatted per the <code>ruff</code> implementation of PEP8 (which is like <code>black</code>, but faster)</li> <li>Line width should be no more than 99 characters.</li> <li>Document function signatures with type annotations and pass inspection with <code>mypy</code></li> </ul> <p>To make sure your code conforms to our style \u2013 ensuring that all differences are meaningful and not just fommatting \u2013 please use <code>pre-commit</code> before submitting any pull-requests to the main repository:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>This will make sure your code conforms to our guidelines as defined in <code>pyproject.toml</code>.</p>"},{"location":"development/#contributing","title":"Contributing","text":"<p>Generally we are happy to accept pull-requests directly to the <code>main</code> branch which improve documentation or make very minor changes.  If you are making more significant changes, please:</p>"},{"location":"development/#before-starting","title":"Before starting","text":"<ul> <li>Create an issue describing the problem you ar solving: Make sure people know what you are working on and that they can let you know sooner rather than later about their opinions (or assign yourself an existing issue).</li> </ul>"},{"location":"development/#developing","title":"Developing","text":"<ul> <li>Follow the style guide</li> <li>Regularly update your fork with upstream changes</li> </ul>"},{"location":"development/#incorporating-code-to-main-projectcard-repository","title":"Incorporating Code to main ProjectCard Repository","text":"<ul> <li>Make sure your code passes all tests</li> <li>If you updated documentation, make [sure it properly builds].</li> <li>Run <code>pre-commit</code></li> <li>Submit a pull-request to the main project card repository and thoroughly describe the problem you are trying to solve, referencing the issue it addresses</li> <li>Respond to requests from the code reviewer</li> </ul>"},{"location":"development/#documentation","title":"Documentation","text":"<p>Documentation is maintained in the <code>/docs</code> repository in markdown text files and is built using the <code>mkdocs</code> package.  Public documentation is built using a Github Workflow (<code>.github/workflows/push.yml</code>) and published using <code>mike</code> to Github Pages.</p>"},{"location":"development/#build-the-documentation-locally","title":"Build the documentation locally","text":"<p>This is useful to make sure that changes you made are rendered as you would expect them.</p> install documentation dependencies<pre><code>pip -r docs/requirements.txt\n</code></pre> building documentation locally<pre><code>mkdocs serve\n</code></pre>"},{"location":"development/#releases","title":"Releases","text":"<ul> <li>Releases follow semantic versioning.</li> <li>Releases are triggered by project management team via the github \u201creleases\u201d interface.  </li> <li>Creating a release in github will trigger a github action to send it to <code>pypi</code> so that users installing it via <code>pip</code> will have access to it.</li> </ul> <p>Tip</p> <p>Releases must have a unique version number in order to be updated on pypi.</p>"},{"location":"examples/","title":"Example Data","text":"<p>Example data can be found in the <code>/examples</code> directory.</p> Name Category Notes Change Node X Value Location Roadway Property Change Example Calculate Mega Freeways Pycode Example Property Change Roadway Property Change Simple road diet Example Add Simple Managed Lane Project Roadway Property Change Simple managed lane project with AM and PM lanes are tolled based on occupancy Example I394 Parallel Lanes Roadway Property Change demonstrates how to add managed lanes to an existing roadway with restricted access Example Property Change For All Links Roadway Property Change Reduce lanes and add separated bike facility for all drive links with two lanes and bicycle facility of 0,2, or 3 Convert Intersection To Interchange Multiple: Roadway Deletion, Roadway Addition demonstrates how to nest multiple changes into a single project under <code>changes</code> Bus Resign Transit Property Change Bus Reroute Transit Routing Change re-routes a bus route to avoid construction Example Roadway Addition And Deletion Multiple: Roadway Deletion, Roadway Addition project card with multiple category of add and delete changes Example Delete Roadway Roadway Deletion simple roadway deletion Blue Line Service Enhancement A Transit Property Change changes headway for a single trip during the morning peak Example Roadway Add Roadway Addition Simple project card to add new roadway"},{"location":"examples/#cards","title":"Cards","text":""},{"location":"examples/#change-node-x-value-location","title":"Change Node X Value Location","text":"<p>Category: Roadway Property Change examples/roadway-node-property-change.yml<pre><code>project: Change node X value location\nroadway_property_change:\n  facility:\n    nodes:\n      model_node_id: [1234]\n  property_changes:\n    X:\n      set: 1.0\n</code></pre></p>"},{"location":"examples/#example-calculate-mega-freeways","title":"Example Calculate Mega Freeways","text":"<p>Category: Pycode examples/roadway-calculated.wr<pre><code>---\nproject: example calculate mega freeways\nself_obj_type: RoadwayNetwork\n---\n\nself.links_df.loc[self.links_df['lanes'] == 4, 'lanes'] = 12\n</code></pre></p>"},{"location":"examples/#example-property-change","title":"Example Property Change","text":"<p>Category: Roadway Property Change examples/roadway-property-change.yml<pre><code>project: Example property change\ntags:\n   - 'example'\nroadway_property_change:\n  facility:\n    links:\n      modes: ['drive','bike']\n      osm_link_id:\n        - '1234'\n        - '2345'\n    from:\n      osm_node_id: '4321'\n    to:\n      osm_node_id: '4322'\n  property_changes:\n    lanes:\n      set: 2\n    bicycle_facility:\n      set: 3\nnotes: Simple road diet\n</code></pre></p>"},{"location":"examples/#example-add-simple-managed-lane-project","title":"Example Add Simple Managed Lane Project","text":"<p>Category: Roadway Property Change examples/roadway-add-managed-lane-simple.yml<pre><code>project: example add simple managed lane project\nnotes: Simple managed lane project with AM and PM lanes are tolled based on occupancy\ntags:\n   - 'example'\n   - 'managed'\nroadway_property_change:\n  facility:\n    links:\n      name:\n        - 'I 35E'\n    from:\n      osm_node_id: '961117623'\n    to:\n      osm_node_id: '2564047368'\n  property_changes:\n    segment_id:\n      set: 35EHOT-A\n    lanes:\n      set: 3\n      scoped:\n        - timespan: ['6:00', '9:00']\n          set: 2\n        - timespan: ['16:00', '19:00']\n          set: 2\n    ML_lanes:\n      set: 0\n      scoped:\n        - timespan: ['6:00', '9:00']\n          set: 1\n        - timespan: ['16:00', '19:00']\n          set: 1\n    ML_price:\n      set: 0\n      scoped:\n        - timespan: ['6:00', '9:00']\n          category: ['sov']\n          set: 1.5\n        - timespan: ['16:00', '19:00']\n          category: ['sov']\n          set: 2.5\n        - timespan: ['6:00', '9:00']\n          category: ['hov2']\n          set: 1.0\n        - timespan: ['16:00', '19:00']\n          category: ['hov2']\n          set: 2.0\n    ML_access_point:\n      set: 'all'\n    ML_egress_point:\n      set: 'all'\n</code></pre></p>"},{"location":"examples/#example-i394-parallel-lanes","title":"Example I394 Parallel Lanes","text":"<p>Category: Roadway Property Change examples/roadway-add-managed-lane-restricted-access.yml<pre><code>project: Example I394 Parallel Lanes\ntags: ['managed lanes']\nnotes: demonstrates how to add managed lanes to an existing roadway with restricted access\nroadway_property_change:\n  facility:\n    links:\n      model_link_id:\n        - 390239\n        - 391206\n        - 390344\n        - 401484\n  property_changes:\n    ML_lanes:\n      set: 0\n      scoped:\n      - timespan: ['6:00', '9:00']\n        set: 1\n      - timespan: ['15:00', '18:00']\n        set: 1\n    lanes:\n      change: 0\n      scoped:\n      - timespan: ['6:00', '9:00']\n        change: -1\n      - timespan: ['15:00', '18:00']\n        change: -1\n    segment_id:\n      set: 5\n    ML_HOV:\n      set: 5\n    HOV:\n      set: 5\n    ML_access_point:\n      set: [38765, 87982]\n    ML_egress_point:\n      set: [87993, 37457]\n</code></pre></p>"},{"location":"examples/#example-property-change-for-all-links","title":"Example Property Change For All Links","text":"<p>Category: Roadway Property Change examples/roadway-property-change-all.yml<pre><code>project: Example property change for all links\ntags:\n   - 'example'\nroadway_property_change:\n  facility:\n    links:\n      modes: ['drive']\n      all: 'True'\n      lanes: 2\n      bicycle_facility: [0,2,3]\n  property_changes:\n    lanes:\n      set: 1\n    bicycle_facility:\n      set: 1\nnotes: Reduce lanes and add separated bike facility for all drive links with two lanes and bicycle facility of 0,2, or 3\n</code></pre></p>"},{"location":"examples/#convert-intersection-to-interchange","title":"Convert Intersection To Interchange","text":"<p>Category: Multiple: Roadway Deletion, Roadway Addition examples/roadway-add-interchange.yml<pre><code>project: convert intersection to interchange\nnotes: demonstrates how to nest multiple changes into a single project under `changes`\nchanges:\n- roadway_deletion:\n    links:\n      model_link_id:\n      - 2171\n      - 25856\n      - 383747\n      - 383790\n- roadway_addition:\n    links:\n      - A: 354386\n        name: interchange ramp\n        roadway: motorway_link\n        B: 16214\n        distance : 0.13201\n        lanes: 1\n        model_link_id: 2171\n        bus_only: 0\n        rail_only: 0\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 16214\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354386\n        distance: 0.13201\n        lanes: 1\n        model_link_id: 25856\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 4336\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354387\n        distance: 0.14848\n        lanes: 1\n        model_link_id: 2171\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354387\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354386\n        distance: 0.10981\n        lanes: 1\n        model_link_id: 2171\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354386\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354387\n        distance: 0.10981\n        lanes: 1\n        model_link_id: 25856\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354387\n        name: interchange ramp\n        roadway: motorway_link\n        B: 4336\n        distance: 0.14848\n        lanes: 1\n        model_link_id: 25856\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354388\n        name: interchange ramp\n        roadway: motorway_link\n        B: 13931\n        distance: 0.55987\n        lanes: 2\n        model_link_id: 383747\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 12590\n        name: interchange ramp\n        roadway: motorway_link\n        count_AM: 0\n        B: 354389\n        distance: 0.15228\n        lanes: 2\n        model_link_id: 383747\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354389\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354388\n        distance: 0.16071\n        lanes: 2\n        model_link_id: 383747\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 12655\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354390\n        distance: 0.21899\n        lanes: 3\n        model_link_id: 383790\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354390\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354391\n        distance: 0.21108\n        lanes: 3\n        model_link_id: 383790\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354391\n        B: 14248\n        name: interchange ramp\n        roadway: motorway_link\n        distance: 0.36316\n        lanes: 3\n        model_link_id: 383790\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354387\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354388\n        distance: 0.09188\n        lanes: 2\n        model_link_id: 384040\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354390\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354386\n        distance: 0.12286\n        lanes: 2\n        model_link_id: 384040\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354386\n        name: interchange ramp\n        roadway: motorway_link\n        B: 354391\n        distance: 0.08689\n        lanes: 2\n        model_link_id: 384040\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n      - A: 354389\n        B: 354387\n        name: interchange ramp\n        roadway: motorway_link\n        distance: 0.09431\n        lanes: 2\n        model_link_id: 384040\n        bike_access: 0\n        drive_access: 1\n        walk_access: 0\n    nodes:\n      - X: -93.14412\n        Y: 44.87497\n        model_node_id: 354386\n      - X: -93.14189\n        Y: 44.87499\n        model_node_id: 354387\n      - X: -93.14239\n        Y: 44.87644\n        model_node_id: 354388\n      - X: -93.14322\n        Y: 44.87414\n        model_node_id: 354389\n      - X: -93.14273\n        Y: 44.87648\n        model_node_id: 354390\n      - X: -93.14382\n        Y: 44.87355\n        model_node_id: 354391\n</code></pre></p>"},{"location":"examples/#bus-resign","title":"Bus Resign","text":"<p>Category: Transit Property Change examples/transit-node-selection.yml<pre><code>project: Bus resign\ntags:\n   - existing_plus_committed\ntransit_property_change:\n  service:\n    trip_properties:\n      route_id:\n        - \"294-111\"\n    nodes:\n      model_node_id:\n        - 37582\n        - 37574\n      require: \"any\"\n  property_changes:\n    trip_headsign:\n      change: \" thru Union Station\"\n</code></pre></p>"},{"location":"examples/#bus-reroute","title":"Bus Reroute","text":"<p>Category: Transit Routing Change examples/transit-shape-change.yml<pre><code>project: Bus Reroute\nnotes: re-routes a bus route to avoid construction\ntags:\n   - existing_plus_committed\ntransit_routing_change:\n  service:\n    trip_properties:\n      route_id:\n        - 294-111\n      direction_id: 1\n  routing:\n    existing:\n      - -37582\n      - -37574\n      - -4761\n      - -4763\n      - -4764\n      - -98429\n      - 45985\n      - -57483\n      - -126324\n      - -57484\n      - 150855\n      - -11188\n      - 84899\n      - 46666\n      - -77077\n    set:\n      - -37582\n      - -37574\n      - -4761\n      - -4763\n      - -4764\n      - -98429\n      - 45985\n      - -57483\n      - -126324\n      - -57484\n      - 150855\n      - -11188\n      - 84899\n      - 46666\n      - -46665\n      - -46663\n      - -81820\n      - -76167\n      - -77077\n</code></pre></p>"},{"location":"examples/#example-roadway-addition-and-deletion","title":"Example Roadway Addition And Deletion","text":"<p>Category: Multiple: Roadway Deletion, Roadway Addition examples/roadway-add-delete.yml<pre><code>project: example roadway addition and deletion\ntags:\n  - 'add and delete roadway'\nchanges:\n  - roadway_addition:\n      nodes:\n      - model_node_id: 314159\n        X: -93.18389\n        Y: 44.96898\n        drive_node: 1\n        walk_node: 0\n        bike_node: 0\n        transit_node: 1\n  - roadway_deletion:\n      links:\n        model_link_id:\n          - 281\n          - 477533\n      nodes:\n        model_node_id:\n          - 314159\n  - roadway_addition:\n      links:\n      - A: 3230\n        B: 3262\n        model_link_id: 999998\n        trn_priority: 0\n        lanes: 1\n        name: new bike greenway and neighborhood st\n        bike_facility: 3\n        drive_access: 1\n        walk_access: 1\n        bike_access: 1\n        bus_only: 0\n        rail_only: 0\n        roadway: residential\n        distance: 0.10462\n        ttime_assert: 0.0\n        OPERATION_final: A\n      - A: 3262\n        B: 3230\n        model_link_id: 999997\n        trn_priority: 0\n        lanes: 1\n        name: new bike greenway and neighborhood st\n        bike_facility: 3\n        drive_access: 1\n        walk_access: 1\n        bike_access: 1\n        bus_only: 0\n        rail_only: 0\n        roadway: residential\n        distance: 0.10462\n        ttime_assert: 0.0\n        OPERATION_final: A\n      nodes:\n      - model_node_id: 354388\n        X: -93.18389\n        Y: 44.96898\n        drive_node: 1\n        walk_node: 0\n        bike_node: 0\n        transit_node: 1\nnotes: project card with multiple category of add and delete changes\n</code></pre></p>"},{"location":"examples/#example-delete-roadway","title":"Example Delete Roadway","text":"<p>Category: Roadway Deletion examples/roadway-delete.yml<pre><code>project: example delete roadway\nnotes: simple roadway deletion\ntags:\n  - 'delete roadway'\n  - 'example'\nroadway_deletion:\n  links:\n    model_link_id:\n      - 281\n      - 477533\n  nodes:\n    model_node_id:\n      - 314159\n</code></pre></p>"},{"location":"examples/#blue-line-service-enhancement-a","title":"Blue Line Service Enhancement A","text":"<p>Category: Transit Property Change examples/transit-property-change.yml<pre><code>project: Blue Line Service Enhancement A\nnotes: changes headway for a single trip during the morning peak\ntags:\n   - example\ntransit_property_change:\n  service:\n    trip_properties:\n      trip_id:\n        - 14940701-JUN19-MVS-BUS-Weekday-01\n    timespans:\n      - ['06:00:00', '09:00:00']\n  property_changes:\n    headway_secs:\n      set: 900\n</code></pre></p>"},{"location":"examples/#example-roadway-add","title":"Example Roadway Add","text":"<p>Category: Roadway Addition examples/roadway-add.yml<pre><code>project: example roadway add\nnotes: Simple project card to add new roadway\ntags:\n  - 'add roadway'\n  - 'example'\nroadway_addition:\n  links:\n    - A: 269066\n      B: 268932\n      name: new neighborhood st\n      bike_access: 1\n      drive_access: 0\n      bus_only: 0\n      rail_only: 0\n      walk_access: 1\n      roadway: residential\n      lanes: 1\n      model_link_id: 404982\n    - A: 268932\n      B: 269066\n      bike_access: 1\n      name: new neighborhood st\n      drive_access: 0\n      bus_only: 0\n      rail_only: 0\n      walk_access: 1\n      roadway: residential\n      lanes: 1\n      model_link_id: 407042\n</code></pre></p>"},{"location":"json-schemas/","title":"Schema Documentation","text":"<p>Warning</p> <p>The switch from json-schema to Pydantic is  WIP therefore this doesn\u2019t look too pretty, but is hopefully a temporary state.</p> <p> Expand all Collapse all </p> <pre><code>&lt;div class=\"breadcrumbs\"&gt;&lt;/div&gt; &lt;h1&gt;Project Card Schema&lt;/h1&gt;&lt;br/&gt;\n</code></pre> One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li><li> Option 5 </li><li> Option 6 </li><li> Option 7 </li><li> Option 8 </li></ul> root          oneOf item 0Type: object The following properties are required: <ul><li>roadway_deletion</li></ul> root          oneOf item 1Type: object The following properties are required: <ul><li>roadway_addition</li></ul> root          oneOf item 2Type: object The following properties are required: <ul><li>roadway_property_change</li></ul> root          oneOf item 3Type: object The following properties are required: <ul><li>roadway_managed_lanes</li></ul> root          oneOf item 4Type: object The following properties are required: <ul><li>transit_property_change</li></ul> root          oneOf item 5Type: object The following properties are required: <ul><li>transit_routing_change</li></ul> root          oneOf item 6Type: object The following properties are required: <ul><li>pycode</li></ul> root          oneOf item 7Type: object The following properties are required: <ul><li>changes</li></ul> $schema root          $schemaType: string <p>Reference to the project card schema which this file uses. If not specified, will be assumed to be the most recent release.</p> project Required root          projectType: string <p>A project name which uniquely identifies this project</p> dependencies root          dependenciesType: object No Additional Properties prerequisites root          dependencies prerequisitesProject PrerequisitesType: array No Additional Items Example: <pre>\"7th St E Road Diet\"\n</pre> corequisites root          dependencies corequisitesProject Co-requisitesType: array No Additional Items Example: <pre>\"7th St E Road Diet\"\n</pre> conflicts root          dependencies conflictsProject ConflictsType: array No Additional Items Example: <pre>\"7th St E Road Diet\"\n</pre> tags root          tagsType: array of string No Additional ItemsEach item of this array must be: root          tags tags itemsType: string Example: <pre>\"vision2050\"\n</pre> roadway_deletion root          roadway_deletionType: object No Additional Properties Any of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          roadway_deletion anyOf item 0Type: object The following properties are required: <ul><li>links</li></ul> root          roadway_deletion anyOf item 1Type: object The following properties are required: <ul><li>nodes</li></ul> Examples: <pre>{\n    \"links\": {\n        \"model_link_id\": [\n            1,\n            2,\n            3\n        ]\n    }\n}\n</pre> <pre>{\n    \"links\": {\n        \"ref\": [\n            \"I-5\"\n        ],\n        \"lanes\": 2\n    }\n}\n</pre> <pre>{\n    \"nodes\": {\n        \"model_node_id\": [\n            1,\n            2,\n            3\n        ]\n    }\n}\n</pre> links root          roadway_deletion linksType: object <p>requirements for describing links in the <code>facility</code> section of a project card.</p> One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li><li> Option 5 </li></ul> root          roadway_deletion links oneOf item 0Type: object The following properties are required: <ul><li>name</li></ul> root          roadway_deletion links oneOf item 1Type: object The following properties are required: <ul><li>ref</li></ul> root          roadway_deletion links oneOf item 2Type: object The following properties are required: <ul><li>osm_link_id</li></ul> root          roadway_deletion links oneOf item 3Type: object The following properties are required: <ul><li>model_link_id</li></ul> root          roadway_deletion links oneOf item 4Type: object The following properties are required: <ul><li>all</li></ul> Must not be: root          roadway_deletion links not Any of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          roadway_deletion links not anyOf item 0Type: object The following properties are required: <ul><li>from</li></ul> root          roadway_deletion links not anyOf item 1Type: object The following properties are required: <ul><li>to</li></ul> Examples: <pre>{\n    \"name\": [\n        \"Main St\"\n    ],\n    \"modes\": [\n        \"drive\"\n    ]\n}\n</pre> <pre>{\n    \"osm_link_id\": [\n        \"123456789\"\n    ]\n}\n</pre> <pre>{\n    \"model_link_id\": [\n        123456789\n    ],\n    \"modes\": [\n        \"walk\"\n    ]\n}\n</pre> <pre>{\n    \"all\": \"True\",\n    \"modes\": [\n        \"transit\"\n    ]\n}\n</pre> all root          roadway_deletion links allType: enum (of string) Must be one of: <ul><li>\"True\"</li><li>\"False\"</li></ul> name root          roadway_deletion links nameType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_deletion links name nameType: string <p>Name of Roadway facility. If multiple, can be contatenated with a comma.</p> Examples: <pre>\"Elm Street\"\n</pre> <pre>\"Raleigh Beltline\"\n</pre> <pre>\"Capital Beltway\"\n</pre> <pre>\"3rd St,Willie Mays Blvd\"\n</pre> ref root          roadway_deletion links refType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_deletion links ref refType: string <p>Reference name of roadway, per Open Street Map definition.</p> Examples: <pre>\"I-40\"\n</pre> <pre>\"US66\"\n</pre> <pre>\"WA520\"\n</pre> osm_link_id root          roadway_deletion links osm_link_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_deletion links osm_link_id osm_link_idType: string <p>Reference to the corresponding Open Street Map link. Note that due to link splitting this may or may not be unique, and is not a required attribute.</p> model_link_id root          roadway_deletion links model_link_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_deletion links model_link_id model_link_idType: integer <p>Unique id for facility.</p> modes root          roadway_deletion links modesType: array No Additional ItemsEach item of this array must be: root          roadway_deletion links modes mode.jsonType: enum (of string) Must be one of: <ul><li>\"drive\"</li><li>\"walk\"</li><li>\"bike\"</li><li>\"transit\"</li><li>\"any\"</li></ul> Additional Properties <p>Additional Properties of any type are allowed.</p> root          roadway_deletion links additionalPropertiesType: object nodes root          roadway_deletion nodesType: object <p>requirements for describing multiple nodes of a project card (e.g. to delete).</p> No Additional Properties Any of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          roadway_deletion nodes anyOf item 0Type: object The following properties are required: <ul><li>osm_node_id</li></ul> root          roadway_deletion nodes anyOf item 1Type: object The following properties are required: <ul><li>model_node_id</li></ul> Examples: <pre>{\n    \"osm_node_id\": [\n        \"12345\",\n        \"67890\"\n    ],\n    \"model_node_id\": [\n        12345,\n        67890\n    ]\n}\n</pre> <pre>{\n    \"osm_node_id\": [\n        \"12345\",\n        \"67890\"\n    ]\n}\n</pre> <pre>{\n    \"model_node_id\": [\n        12345,\n        67890\n    ]\n}\n</pre> osm_node_id root          roadway_deletion nodes osm_node_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_deletion nodes osm_node_id osm_node_idType: string <p>Reference to the corresponding Open Street Map node.</p> Example: <pre>\"954734870\"\n</pre> model_node_id root          roadway_deletion nodes model_node_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_deletion nodes model_node_id model_node_idType: integer <p>Primary key to the nodes object.</p> ignore_missing root          roadway_deletion nodes ignore_missingType: boolean all root          roadway_deletion nodes allType: boolean roadway_addition root          roadway_additionType: object No Additional Properties Any of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          roadway_addition anyOf item 0Type: object The following properties are required: <ul><li>links</li></ul> root          roadway_addition anyOf item 1Type: object The following properties are required: <ul><li>nodes</li></ul> Example: <pre>{\n    \"links\": [\n        {\n            \"A\": 1,\n            \"B\": 2,\n            \"model_link_id\": 123,\n            \"name\": \"Elm Street\",\n            \"roadway\": \"residential\",\n            \"lanes\": 2,\n            \"price\": 0.75,\n            \"walk_access\": 1,\n            \"bike_access\": 1,\n            \"bike_facility\": 1,\n            \"drive_access\": 1,\n            \"bus_only\": 0,\n            \"rail_only\": 0\n        }\n    ],\n    \"nodes\": [\n        {\n            \"model_node_id\": 1,\n            \"X\": -122.419,\n            \"Y\": 37.7\n        },\n        {\n            \"model_node_id\": 2,\n            \"X\": -122.419,\n            \"Y\": 37.8\n        }\n    ]\n}\n</pre> links root          roadway_addition linksType: array No Additional ItemsEach item of this array must be: root          roadway_addition links roadway_link.jsonType: object <p>Requirements for roadway links.</p> Example: <pre>{\n    \"A\": 123,\n    \"B\": 5543,\n    \"model_link_id\": 123,\n    \"name\": \"Elm Street\",\n    \"roadway\": \"residential\",\n    \"lanes\": 2,\n    \"price\": 0.75,\n    \"walk_access\": 1,\n    \"bike_access\": 1,\n    \"bike_facility\": 1,\n    \"drive_access\": 1,\n    \"bus_only\": 0,\n    \"rail_only\": 0\n}\n</pre> A Required root          roadway_addition links Roadway links AType: integer <p>Foreign key to the nodes object.</p> B Required root          roadway_addition links Roadway links BType: integer <p>Foreign key to the nodes object.</p> Same definition as A model_link_id Required root          roadway_addition links Roadway links model_link_idType: integer <p>Unique id for facility.</p> Same definition as roadway_deletion_links_model_link_id_items osm_link_id root          roadway_addition links Roadway links osm_link_idType: string <p>Reference to the corresponding Open Street Map link. Note that due to link splitting this may or may not be unique, and is not a required attribute.</p> Same definition as roadway_deletion_links_osm_link_id_items shstReferenceId root          roadway_addition links Roadway links shstReferenceIdType: string <p>The Shstreferenceid Schema</p> Example: <pre>\"6a22969708104ae2497244f3d079381d\"\n</pre> shstGeometryId root          roadway_addition links Roadway links shstGeometryIdType: string <p>The Shstgeometryid Schema</p> Example: <pre>\"6a22969708104ae2497244f3d079381d\"\n</pre> locationReferences root          roadway_addition links Roadway links locationReferencesType: array <p>The Locationreferences Schema</p> No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links locationReferences locationReferenceType: object sequence Required root          roadway_addition links Roadway links locationReferences locationReferences items sequenceType: integer <p>Value must be greater or equal to <code>0</code></p> point Required root          roadway_addition links Roadway links locationReferences locationReferences items pointType: object distanceToNextRef root          roadway_addition links Roadway links locationReferences locationReferences items distanceToNextRefType: number <p>Distance of facility in miles. If not provided, will be calculated provided nodes</p> <p>Value must be greater or equal to <code>0</code></p> Example: <pre>93.08\n</pre> bearing root          roadway_addition links Roadway links locationReferences locationReferences items bearingType: integer <p>The angle of the eminating arc from the point, expressed in clockwise degrees from North (0)</p> <p>Value must be greater or equal to <code>0</code> and lesser or equal to <code>360</code></p> Examples: <pre>0\n</pre> <pre>90\n</pre> <pre>275\n</pre> intersectionId root          roadway_addition links Roadway links locationReferences locationReferences items intersectionIdType: string <p>The Intersectionid Schema</p> Example: <pre>\"4d0231aa0ebb779f142c2518703ee481\"\n</pre> name Required root          roadway_addition links Roadway links nameType: string <p>Name of Roadway facility. If multiple, can be contatenated with a comma.</p> Same definition as roadway_deletion_links_name_items ref root          roadway_addition links Roadway links refType: string <p>Reference name of roadway, per Open Street Map definition.</p> Same definition as roadway_deletion_links_ref_items roadway Required root          roadway_addition links Roadway links roadwayType: enum (of string) Default: \"road\" <p>Roadway type, using OSM Highway values. Notes: * <code>X_link</code> roadway types denote linkage roads going to/from roadway type X (i.e. on/off ramps, etc). * <code>road</code> denotes unknown type.</p> Must be one of: <ul><li>\"motorway\"</li><li>\"trunk\"</li><li>\"primary\"</li><li>\"secondary\"</li><li>\"tertiary\"</li><li>\"unclassified\"</li><li>\"residential\"</li><li>\"motorway_link\"</li><li>\"trunk_link\"</li><li>\"primary_link\"</li><li>\"secondary_link\"</li><li>\"tertiary_link\"</li><li>\"living_street\"</li><li>\"service\"</li><li>\"pedestrian\"</li><li>\"footway\"</li><li>\"steps\"</li><li>\"cycleway\"</li><li>\"track\"</li><li>\"bus_guideway\"</li><li>\"road\"</li></ul> lanes Required root          roadway_addition links Roadway links lanesType: object <p>Number of lanes either in simple or complex terms.</p> One of <ul><li> Option 1 </li><li> scoped_number_property_value </li></ul> root          roadway_addition links Roadway links lanes oneOf item 0Type: number <p>Value must be greater or equal to <code>0</code></p> root          roadway_addition links Roadway links lanes oneOf scoped_number_property_valueType: object One of <ul><li> number_property.by_time-of-day </li><li> number_property.by_access-category </li><li> number_property.by_access-category-and-time-of-day </li></ul> root          roadway_addition links Roadway links lanes oneOf item 1 oneOf number_property.by_time-of-dayType: object Example: <pre>{\n    \"default\": 1,\n    \"timeofday\": [\n        {\n            \"timespan\": [\n                \"7:00\",\n                \"9:00\"\n            ],\n            \"value\": 0.5\n        }\n    ]\n}\n</pre> default Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 0 defaultType: number <p>Value must be greater or equal to <code>0</code></p> timeofday Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 0 timeofdayType: array of object No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 0 timeofday timeofday itemsType: object timespan Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 0 timeofday timeofday items timespanType: array <p>Must contain a minimum of <code>2</code> items</p><p>Must contain a maximum of <code>2</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 0 timeofday timeofday items timespan time.jsonType: string Must match regular expression: <code>^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$</code> Examples: <pre>\"12:34\"\n</pre> <pre>\"12:34:56\"\n</pre> Example: <pre>[\n    \"12:00\",\n    \"19:45:00\"\n]\n</pre> value Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 0 timeofday timeofday items valueType: number <p>Value must be greater or equal to <code>0</code></p> root          roadway_addition links Roadway links lanes oneOf item 1 oneOf number_property.by_access-categoryType: object The following properties are required: <ul><li>groups</li></ul> Example: <pre>{\n    \"default\": 1,\n    \"groups\": [\n        {\n            \"category\": [\n                \"HOV2\"\n            ],\n            \"value\": 0.5\n        }\n    ]\n}\n</pre> default Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 1 defaultType: number <p>Value must be greater or equal to <code>0</code></p> group root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 1 groupType: array of object No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 1 group group itemsType: object category Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 1 group group items categoryType: array of string No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 1 group group items category category itemsType: string value Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 1 group group items valueType: number <p>Value must be greater or equal to <code>0</code></p> root          roadway_addition links Roadway links lanes oneOf item 1 oneOf number_property.by_access-category-and-time-of-dayType: object Example: <pre>{\n    \"default\": 1,\n    \"timeofday\": [\n        {\n            \"timespan\": [\n                \"7:00\",\n                \"9:00\"\n            ],\n            \"category\": [\n                \"HOV2\"\n            ],\n            \"value\": 0.5\n        }\n    ]\n}\n</pre> default Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 2 defaultType: number <p>Value must be greater or equal to <code>0</code></p> timeofday Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 2 timeofdayType: array of object No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 2 timeofday timeofday itemsType: object category Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 2 timeofday timeofday items categoryType: array of string No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 2 timeofday timeofday items category category itemsType: string timespan Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 2 timeofday timeofday items timespanType: array Same definition as timespan value Required root          roadway_addition links Roadway links lanes oneOf item 1 oneOf item 2 timeofday timeofday items valueType: number <p>Value must be greater or equal to <code>0</code></p> Examples: <pre>2\n</pre> <pre>5\n</pre> <pre>{\n    \"default\": 1,\n    \"timeofday\": {\n        \"timespan\": [\n            \"6:00\",\n            \"9:00\"\n        ],\n        \"value\": 2\n    }\n}\n</pre> price root          roadway_addition links Roadway links priceType: object Default: 0 <p>Price of facility, either as a positive number of a complex type by time of day and/or access category.</p> One of <ul><li> Option 1 </li><li> scoped_number_property_value </li></ul> root          roadway_addition links Roadway links price oneOf item 0Type: number <p>Value must be greater or equal to <code>0</code></p> root          roadway_addition links Roadway links price oneOf scoped_number_property_valueType: object Same definition as roadway_addition_links_items_lanes_oneOf_i1 Examples: <pre>0.75\n</pre> <pre>2.9\n</pre> <pre>{\n    \"default\": 1,\n    \"timeofday\": {\n        \"time\": [\n            \"6:00\",\n            \"9:00\"\n        ],\n        \"value\": 2\n    }\n}\n</pre> ML_lanes root          roadway_addition links Roadway links ML_lanesType: object <p>Number of lanes either in simple or complex terms.</p> Same definition as lanes ML_price root          roadway_addition links Roadway links ML_priceType: object Default: 0 <p>Price for a parallel managed lane facility.</p> Same definition as price ML_access_point root          roadway_addition links Roadway links ML_access_pointType: object <p>Indicates where a managed lane facility can by accessed or exited either by indicating <code>all</code> for everywhere, or listing foreign keys to specific A-nodes.</p> One of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          roadway_addition links Roadway links ML_access_point oneOf item 0Type: string root          roadway_addition links Roadway links ML_access_point oneOf item 1Type: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          roadway_addition links Roadway links ML_access_point oneOf item 1 nodeType: integer <p>Foreign key to the nodes object.</p> Same definition as A Examples: <pre>\"all\"\n</pre> <pre>[\n    123,\n    5543\n]\n</pre> ML_egress_point root          roadway_addition links Roadway links ML_egress_pointType: object <p>Indicates where a managed lane facility can by accessed or exited either by indicating <code>all</code> for everywhere, or listing foreign keys to specific A-nodes.</p> Same definition as ML_access_point walk_access Required root          roadway_addition links Roadway links walk_accessType: integer or boolean <p>Indicates if a facility is generally available for pedestrians. Must not be true if any of busonly or railonly are true.</p> bike_access Required root          roadway_addition links Roadway links bike_accessType: integer or boolean <p>Indicates if a facility is generally available for cyclists. Must not be true if any of busonly or railonly are true.</p> bike_facility root          roadway_addition links Roadway links bike_facilityType: integer <p>Indicator for the category of bicycle facility on or along the roadway. If null, indicates unknown. If zero, indicates no facility.</p> <p>Value must be greater or equal to <code>0</code></p> drive_access Required root          roadway_addition links Roadway links drive_accessType: integer or boolean <p>Indicates if a facility is generally available for driving. Must not be true if any of busonly or railonly are true.</p> bus_only root          roadway_addition links Roadway links bus_onlyType: integer or boolean Default: 0 <p>Indicates if a facility is rail-only if True.  Must not be true if any of walkaccess, bikeaccess, driveaccess, railonly are True.</p> rail_only root          roadway_addition links Roadway links rail_onlyType: integer or boolean Default: 0 <p>Indicates if a facility is rail-only if True.  Must not be true if any of walkaccess, bikeaccess, driveaccess, busonly are True.</p> segment_id root          roadway_addition links Roadway links segment_idType: string or integer <p>An identifier for segments of roadway. Can be useful for querying and setting values for parts of facilities, summary scripts, etc.</p> ignore_missing root          roadway_addition links Roadway links ignore_missingType: boolean all root          roadway_addition links Roadway links allType: boolean nodes root          roadway_addition nodesType: array No Additional ItemsEach item of this array must be: root          roadway_addition nodes roadway_node.jsonType: object <p>Requirements for roadway nodes.</p> Example: <pre>{\n    \"model_node_id\": 1,\n    \"X\": -122.419,\n    \"Y\": 37.774\n}\n</pre> model_node_id Required root          roadway_addition nodes Roadway nodes model_node_idType: integer <p>Primary key to the nodes object.</p> Same definition as roadway_deletion_nodes_model_node_id_items osm_node_id root          roadway_addition nodes Roadway nodes osm_node_idType: string <p>Reference to the corresponding Open Street Map node.</p> Same definition as roadway_deletion_nodes_osm_node_id_items shstReferenceId root          roadway_addition nodes Roadway nodes shstReferenceIdType: string <p>Shared streets node ID reference.</p> Example: <pre>\"0751f5ce12472360fed0d0e80ceae35c\"\n</pre> outboundReferenceIds root          roadway_addition nodes Roadway nodes outboundReferenceIdsType: array No Additional ItemsEach item of this array must be: root          roadway_addition nodes Roadway nodes outboundReferenceIds shstReferenceId_linkType: string <p>The Shstreferenceid Schema</p> Same definition as shstReferenceId inboundReferenceIds root          roadway_addition nodes Roadway nodes inboundReferenceIdsType: array No Additional ItemsEach item of this array must be: root          roadway_addition nodes Roadway nodes inboundReferenceIds shstReferenceId_linkType: string <p>The Shstreferenceid Schema</p> Same definition as shstReferenceId walk_node root          roadway_addition nodes Roadway nodes walk_nodeType: integer or boolean <p>Indicates node is part of the pedestrian network. Useful for exporting or querying networks by mode.</p> bike_node root          roadway_addition nodes Roadway nodes bike_nodeType: integer or boolean <p>Indicates node is part of the bike network. Useful for exporting or querying networks by mode.</p> drive_node root          roadway_addition nodes Roadway nodes drive_nodeType: integer or boolean <p>Indicates node is part of the driving network. Useful for exporting or querying networks by mode.</p> transit_node root          roadway_addition nodes Roadway nodes transit_nodeType: integer or boolean <p>Indicates node is part of the transit network. Useful for exporting or querying networks by mode.</p> X Required root          roadway_addition nodes Roadway nodes XType: number <p>X coordinate (e.g. Longitude)</p> Y Required root          roadway_addition nodes Roadway nodes YType: number <p>Y coordinate (e.g. Latitude)</p> Z root          roadway_addition nodes Roadway nodes ZType: number <p>Z coordinate (e.g. Altitude)</p> roadway_property_change root          roadway_property_changeType: object No Additional Properties facility Required root          roadway_property_change facilityType: object No Additional Properties Any of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li></ul> root          roadway_property_change facility anyOf item 0Type: object The following properties are required: <ul><li>links</li><li>from</li><li>to</li></ul> root          roadway_property_change facility anyOf item 1Type: object The following properties are required: <ul><li>links</li></ul> root          roadway_property_change facility anyOf item 2Type: object The following properties are required: <ul><li>nodes</li></ul> Examples: <pre>{\n    \"links\": {\n        \"name\": [\n            \"Main Street\"\n        ]\n    },\n    \"from\": {\n        \"model_node_id\": 1\n    },\n    \"to\": {\n        \"model_node_id\": 2\n    }\n}\n</pre> <pre>{\n    \"nodes\": {\n        \"osm_node_id\": [\n            \"1\",\n            \"2\",\n            \"3\"\n        ]\n    }\n}\n</pre> <pre>{\n    \"nodes\": {\n        \"model_node_id\": [\n            1,\n            2,\n            3\n        ]\n    }\n}\n</pre> <pre>{\n    \"links\": {\n        \"model_link_id\": [\n            1,\n            2,\n            3\n        ]\n    }\n}\n</pre> links root          roadway_property_change facility linksType: object <p>requirements for describing links in the <code>facility</code> section of a project card.</p> Same definition as links nodes root          roadway_property_change facility nodesType: object <p>requirements for describing multiple nodes of a project card (e.g. to delete).</p> Same definition as nodes from root          roadway_property_change facility fromType: object <p>Selection of a single roadway node in the <code>facility</code> section of a project card.</p> No Additional Properties One of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          roadway_property_change facility from oneOf item 0Type: object The following properties are required: <ul><li>osm_node_id</li></ul> root          roadway_property_change facility from oneOf item 1Type: object The following properties are required: <ul><li>model_node_id</li></ul> Examples: <pre>{\n    \"osm_node_id\": \"12345\"\n}\n</pre> <pre>{\n    \"model_node_id\": 67890\n}\n</pre> osm_node_id root          roadway_property_change facility from osm_node_idType: string <p>Reference to the corresponding Open Street Map node.</p> Same definition as roadway_deletion_nodes_osm_node_id_items model_node_id root          roadway_property_change facility from model_node_idType: integer <p>Primary key to the nodes object.</p> Same definition as roadway_deletion_nodes_model_node_id_items to root          roadway_property_change facility toType: object <p>Selection of a single roadway node in the <code>facility</code> section of a project card.</p> Same definition as from property_changes Required root          roadway_property_change property_changes Any of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li><li> Option 5 </li></ul> root          roadway_property_change property_changes anyOf item 0Type: object .* Pattern Property Pattern Property <p>All properties whose name matches the following regular expression must respect the following conditions</p> Property name regular expression: <code>.*</code> root          roadway_property_change property_changes anyOf item 0 property_set.jsonType: object One of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          roadway_property_change property_changes anyOf item 0 .* oneOf item 0 Must not be: root          roadway_property_change property_changes anyOf item 0 .* oneOf item 0 notType: object The following properties are required: <ul><li>set</li></ul> The following properties are required: <ul><li>change</li></ul> root          roadway_property_change property_changes anyOf item 0 .* oneOf item 1 Must not be: root          roadway_property_change property_changes anyOf item 0 .* oneOf item 1 notType: object The following properties are required: <ul><li>change</li></ul> The following properties are required: <ul><li>set</li></ul> existing root          roadway_property_change property_changes anyOf item 0 .* existingType: number or string change root          roadway_property_change property_changes anyOf item 0 .* changeType: number or string set root          roadway_property_change property_changes anyOf item 0 .* setType: number or string root          roadway_property_change property_changes anyOf item 1Type: object root          roadway_property_change property_changes anyOf item 2Type: object root          roadway_property_change property_changes anyOf item 3Type: object root          roadway_property_change property_changes anyOf item 4Type: object roadway_managed_lanes root          roadway_managed_lanesType: object Same definition as roadway_property_change transit_property_change root          transit_property_changeType: object No Additional Properties service Required root          transit_property_change serviceType: object No Additional Properties Examples: <pre>{\n    \"trip_properties\": {\n        \"route_id\": [\n            \"1234\"\n        ],\n        \"bikes_allowed\": \"1\"\n    },\n    \"route_properties\": {\n        \"agency_id\": [\n            \"2\"\n        ]\n    },\n    \"timespans\": [\n        [\n            \"06:00:00\",\n            \"09:00:00\"\n        ]\n    ]\n}\n</pre> <pre>{\n    \"trip_properties\": {\n        \"route_id\": [\n            \"4321\"\n        ]\n    },\n    \"route_properties\": {\n        \"agency_id\": [\n            \"1\"\n        ]\n    },\n    \"timespans\": [\n        [\n            \"06:00:00\",\n            \"09:00:00\"\n        ],\n        [\n            \"15:00:00\",\n            \"18:00:00\"\n        ]\n    ]\n}\n</pre> <pre>{\n    \"nodes\": {\n        \"model_node_id\": [\n            1,\n            2,\n            3\n        ],\n        \"require\": \"all\"\n    }\n}\n</pre> trip_properties root          transit_property_change service trip_propertiesType: object <p>Selection properties for transit trips.</p> Examples: <pre>{\n    \"trip_id\": [\n        \"1\",\n        \"2\"\n    ],\n    \"direction_id\": 0\n}\n</pre> <pre>{\n    \"shape_id\": [\n        \"1\",\n        \"2\"\n    ]\n}\n</pre> <pre>{\n    \"service_id\": [\n        \"1\",\n        \"2\"\n    ],\n    \"route_id\": [\n        \"1\",\n        \"2\"\n    ]\n}\n</pre> <pre>{\n    \"trip_short_name\": [\n        \"1\",\n        \"2\"\n    ]\n}\n</pre> trip_id root          transit_property_change service trip_properties trip_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service trip_properties trip_id trip_idType: string <p>ID for Individual trip a transit vehicle takes..</p> shape_id root          transit_property_change service trip_properties shape_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service trip_properties shape_id shape_idType: string <p>ID for shape trip is following.</p> direction_id root          transit_property_change service trip_properties direction_idType: enum (of integer) <p>Consistent with GTFS definition defining outbound vs inbound routes.</p> Must be one of: <ul><li>0</li><li>1</li></ul> service_id root          transit_property_change service trip_properties service_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service trip_properties service_id service_idType: string <p>ID for service schedule.</p> route_id root          transit_property_change service trip_properties route_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service trip_properties route_id route_idType: string <p>ID for general route.</p> trip_short_name root          transit_property_change service trip_properties trip_short_nameType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service trip_properties trip_short_name trip_short_nameType: string <p>Route short name, often something like <code>38X</code>.</p> Additional Properties <p>Additional Properties of any type are allowed.</p> root          transit_property_change service trip_properties additionalPropertiesType: object route_properties root          transit_property_change service route_propertiesType: object <p>Selection proeprties for transit routes.</p> Examples: <pre>{\n    \"route_short_name\": [\n        \"1\",\n        \"2\",\n        \"3\"\n    ]\n}\n</pre> <pre>{\n    \"agency_id\": [\n        \"1\"\n    ],\n    \"route_long_name\": [\n        \"Route 1\",\n        \"Route 2\",\n        \"Route 3\"\n    ]\n}\n</pre> <pre>{\n    \"agency_id\": [\n        \"1\"\n    ],\n    \"route_type\": [\n        0,\n        1,\n        2\n    ]\n}\n</pre> route_short_name root          transit_property_change service route_properties route_short_nameType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service route_properties route_short_name route_short_nameType: string <p>Route short name.</p> route_long_name root          transit_property_change service route_properties route_long_nameType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service route_properties route_long_name route_long_nameType: string <p>Route long name.</p> agency_id root          transit_property_change service route_properties agency_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service route_properties agency_id agency_idType: string <p>ID for agency.</p> route_type root          transit_property_change service route_properties route_typeType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service route_properties route_type route_typeType: enum (of integer) <p>Route type.</p> Must be one of: <ul><li>0</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>11</li><li>12</li></ul> Additional Properties <p>Additional Properties of any type are allowed.</p> root          transit_property_change service route_properties additionalPropertiesType: object timespans root          transit_property_change service timespansType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service timespans timespan.jsonType: array Same definition as timespan nodes root          transit_property_change service nodesType: object <p>requirements for describing multiple transit nodes of a project card (e.g. to delete).</p> No Additional Properties One of <ul><li> Option 1 </li><li> Option 2 </li></ul> root          transit_property_change service nodes oneOf item 0Type: object The following properties are required: <ul><li>stop_id</li></ul> root          transit_property_change service nodes oneOf item 1Type: object The following properties are required: <ul><li>model_node_id</li></ul> Examples: <pre>{\n    \"stop_id\": [\n        \"stop1\",\n        \"stop2\"\n    ],\n    \"require\": \"any\"\n}\n</pre> <pre>{\n    \"model_node_id\": [\n        1,\n        2\n    ],\n    \"require\": \"all\"\n}\n</pre> stop_id root          transit_property_change service nodes stop_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service nodes stop_id stop_idType: string <p>ID for specific transit stop.</p> model_node_id root          transit_property_change service nodes model_node_idType: array <p>Must contain a minimum of <code>1</code> items</p> No Additional ItemsEach item of this array must be: root          transit_property_change service nodes model_node_id model_node_idType: integer <p>Primary key to the nodes object.</p> Same definition as roadway_deletion_nodes_model_node_id_items require root          transit_property_change service nodes requireType: enum (of string) Must be one of: <ul><li>\"any\"</li><li>\"all\"</li></ul> property_changes Required root          transit_property_change property_changesType: object .* Pattern Property Pattern Property <p>All properties whose name matches the following regular expression must respect the following conditions</p> Property name regular expression: <code>.*</code> root          transit_property_change property_changes property_set.jsonType: object Same definition as roadway_property_change_property_changes_anyOf_i0_pattern1 transit_routing_change root          transit_routing_changeType: object No Additional Properties service Required root          transit_routing_change serviceType: object Same definition as service routing Required root          transit_routing_change routingType: object No Additional Properties existing root          transit_routing_change routing existingType: array No Additional Items set Required root          transit_routing_change routing setType: array No Additional Items pycode root          pycodeType: string changes root          changesType: array No Additional ItemsEach item of this array must be: root          changes changeType: object One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li><li> Option 5 </li><li> Option 6 </li></ul> root          changes changes items oneOf item 0Type: object The following properties are required: <ul><li>roadway_deletion</li></ul> root          changes changes items oneOf item 1Type: object The following properties are required: <ul><li>roadway_addition</li></ul> root          changes changes items oneOf item 2Type: object The following properties are required: <ul><li>roadway_property_change</li></ul> root          changes changes items oneOf item 3Type: object The following properties are required: <ul><li>transit_property_change</li></ul> root          changes changes items oneOf item 4Type: object The following properties are required: <ul><li>transit_routing_change</li></ul> root          changes changes items oneOf item 5Type: object The following properties are required: <ul><li>pycode</li></ul> roadway_deletion root          changes changes items roadway_deletionType: object Same definition as roadway_deletion roadway_addition root          changes changes items roadway_additionType: object Same definition as roadway_addition roadway_property_change root          changes changes items roadway_property_changeType: object Same definition as roadway_property_change transit_property_change root          changes changes items transit_property_changeType: object Same definition as transit_property_change transit_routing_change root          changes changes items transit_routing_changeType: object Same definition as transit_routing_change pycode root          changes changes items pycodeType: string Same definition as pycode self_obj_type root          self_obj_typeType: enum (of string) <p>For calculated project cards, must refer to the object to perform the calculation on. </p> Must be one of: <ul><li>\"RoadwayNetwork\"</li><li>\"TransitNetwork\"</li></ul> notes root          notesType: string"},{"location":"pydantic-datamodels/","title":"Pydantic Data Models","text":"<p>Warning</p> <p>The switch from json-schema to Pydantic is  WIP.</p> <p>Access to pydantic data models for the projectcard package generated from /schema jsonschema files.</p> <p>Checks if pydantic v1 vs v2 is installed and imports corresponding data models. If pydantic is not installed, its functionality will be \u201cmocked\u201d so that the project card package can be used without pydantic.</p> <p>NOTE: if pydantic is not installed they will provide no actual functionality (but they shouldn\u2019t crash either)</p> <p>Helper classes for time and timespan representation.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Time","title":"<code>PC_Time</code>","text":"<p>Project Card Time representation.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>@dataclass\nclass PC_Time:\n    \"\"\"Project Card Time representation.\"\"\"\n    time: PC_TimeString\n\n    @property\n    def datetime(self):\n        if self.time is str:\n            if len(self.time.split(\":\")) == 2:\n                return datetime.datetime.strptime(self.time, \"%H:%M\")\n            else:\n                return datetime.datetime.strptime(self.time, \"%H:%M:%S\")\n        elif self.time is time:\n            return self.time\n        else:\n            raise TimeFormatError(\"time must be a string or time object\")\n\n    @property\n    def time_sec(self):\n        \"\"\"Time in seconds since midnight.\"\"\"\n        return (\n            self.datetime.hour * 3600 + self.datetime.minute * 60 + self.datetime.second\n        )\n</code></pre>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Time.time_sec","title":"<code>time_sec</code>  <code>property</code>","text":"<p>Time in seconds since midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan","title":"<code>PC_Timespan</code>","text":"<p>Project Card Timespan representation.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>@dataclass\nclass PC_Timespan:\n    \"\"\"Project Card Timespan representation.\"\"\"\n    timespan: PC_TimeSpanString\n\n    @property\n    def start_time(self):\n        \"\"\"Start time of the timespan.\"\"\"\n        return self.timespan[0].time\n\n    @property\n    def end_time(self):\n        \"\"\"End time of the timespan.\"\"\"\n        return self.timespan[1].time\n\n    @property\n    def start_time_dt(self):\n        \"\"\"Start time as a datetime object.\"\"\"\n        return self.timespan[0].datetime\n\n    @property\n    def end_time_dt(self):\n        \"\"\"End time as a datetime object.\"\"\"\n        return self.timespan[1].datetime\n\n    @property\n    def duration_dt(self):\n        \"\"\"Returns a datetime.timedelta object representing the duration of the timespan.\n\n        If end_time is less than start_time, the duration will assume that it crosses over\n        midnight.\n        \"\"\"\n        if self.end_time_dt &lt; self.start_time_dt:\n            return datetime.timedelta(\n                hours=24 - self.start_time_dt.hour + self.end_time_dt.hour,\n                minutes=self.end_time_dt.minute - self.start_time_dt.minute,\n                seconds=self.end_time_dt.second - self.start_time_dt.second,\n            )\n        else:\n            return self.end_time_dt - self.start_time_dt\n\n    @property\n    def start_time_sec(self):\n        \"\"\"Start time in seconds since midnight.\"\"\"\n        return self.timespan[0].time_sec\n\n    @property\n    def end_time_sec(self):\n        \"\"\"End time in seconds since midnight.\"\"\"\n        return self.timespan[1].time_sec\n\n    @property\n    def duration_sec(self):\n        \"\"\"Duration of timespan in seconds.\n\n        If end_time is less than start_time, the duration will assume that it crosses over\n        midnight.\n        \"\"\"\n        if self.end_time_sec &lt; self.start_time_sec:\n            return (24 * 3600) - self.start_time_sec + self.end_time_sec\n        else:\n            return self.end_time_sec - self.start_time_sec\n</code></pre>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.duration_dt","title":"<code>duration_dt</code>  <code>property</code>","text":"<p>Returns a datetime.timedelta object representing the duration of the timespan.</p> <p>If end_time is less than start_time, the duration will assume that it crosses over midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.duration_sec","title":"<code>duration_sec</code>  <code>property</code>","text":"<p>Duration of timespan in seconds.</p> <p>If end_time is less than start_time, the duration will assume that it crosses over midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.end_time","title":"<code>end_time</code>  <code>property</code>","text":"<p>End time of the timespan.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.end_time_dt","title":"<code>end_time_dt</code>  <code>property</code>","text":"<p>End time as a datetime object.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.end_time_sec","title":"<code>end_time_sec</code>  <code>property</code>","text":"<p>End time in seconds since midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.start_time","title":"<code>start_time</code>  <code>property</code>","text":"<p>Start time of the timespan.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.start_time_dt","title":"<code>start_time_dt</code>  <code>property</code>","text":"<p>Start time as a datetime object.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.start_time_sec","title":"<code>start_time_sec</code>  <code>property</code>","text":"<p>Start time in seconds since midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.TimeFormatError","title":"<code>TimeFormatError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in the time format.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>class TimeFormatError(Exception):\n    \"\"\"Exception raised for errors in the time format.\"\"\"\n    pass\n</code></pre>"},{"location":"pydantic-datamodels/#projectcard.models.time.TimespanFormatError","title":"<code>TimespanFormatError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in the timespan format.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>class TimespanFormatError(Exception):\n    \"\"\"Exception raised for errors in the timespan format.\"\"\"\n    pass\n</code></pre>"}]}