{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Cards","text":"<p>Project Cards represent information about a tranportation infrastructure projects sufficient for usage in a regional travel demand model.</p>"},{"location":"#schema","title":"Schema","text":"<p>The ProjectCard schema is represented as a json-schema in the <code>/schema</code> directory.  More details:  json-schemas page.</p>"},{"location":"#pydantic-data-models","title":"Pydantic Data Models","text":"<p>If you are working in a python environment, you might find it easier to use the pydantic data models which are synced to the json-schema.  More details: pydantic-datamodels page.</p>"},{"location":"#example-data","title":"Example Data","text":"<p>Example project cards can be found in the <code>/examples</code> directory and on the examples page</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>This package should generally be used to validate or update project cards.  </p> <p>There is also a limited object model, <code>ProjectCard</code> which can be used to organize and manage project cards.</p>"},{"location":"#command-line","title":"Command Line","text":"<p>Validate project card(s) from a directory or specific file path, optionally filtering by a tag.</p> <pre><code>validate_card card_search_dir --filter_tags ['tag_to_search_for']\n</code></pre> <p>Update older project card(s) to current format from a directory or specific file path.  Cards should still be validated afterwards.</p> <pre><code>update_projectcard_schema card_search_dir output_dir\n</code></pre>"},{"location":"#python-api","title":"Python API","text":"<pre><code>from projectcard.io import read_cards\n\n# Read in cards from a directory with the tag \"Baseline 2030\"\nproject_cards = read_cards(directory, filter_tags=[\"Baseline2030\"])\n\n# Iterate through a deck of cards for validity\nfor project_name,card in project_cards.items():\n    print(f\"{project_name}: {card.valid}\")\n\n# Print out a summary of the card with the project name \"4th Ave Busway\"\nprint(project_cards[\"4th Ave Busway\"])\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install projectcard</code></p> <p>Note :Generally it is not necessary to install the projectcard package as the main purpose of this repository is to maintain the project card schema.  Projects that use the package to validate project cards usually include projectcards as a requirement and install it on their own.</p>"},{"location":"#development-environment","title":"Development Environment","text":"<ol> <li> <p>Fork and clone repo locally</p> </li> <li> <p>Install dependencies</p> </li> </ol> <pre><code>conda install --yes --file requirements.txt\n</code></pre> <p>or</p> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Install from working directory</li> </ol> <pre><code>pip install -e .\n</code></pre>"},{"location":"#production-environment","title":"Production Environment","text":"<pre><code>pip install git+https://github.com/network-wrangler/projectcard@main#egg=projectcard\n</code></pre>"},{"location":"api/","title":"API","text":""},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code>from projectcard.io import read_cards\n\n# Read in cards from a directory with the tag \"Baseline 2030\"\nproject_cards = read_cards(directory, filter_tags=[\"Baseline2030\"])\n\n# Iterate through a deck of cards for validity\nfor project_name,card in project_cards.items():\n    print(f\"{project_name}: {card.valid}\")\n\n# Print out a summary of the card with the project name \"4th Ave Busway\"\nprint(project_cards[\"4th Ave Busway\"])\n</code></pre> <p>Project Card class for project card data schema.</p> <p>Functions for reading and writing project cards.</p> <p>Validates ProjectCard JSON data against a JSON schema.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard","title":"<code>ProjectCard</code>","text":"<p>               Bases: <code>object</code></p> <p>Representation of a Project Card.</p> <p>Attributes:</p> Name Type Description <code>__dict__</code> <p>Dictionary of project card attributes</p> <code>valid</code> <code>bool</code> <p>Boolean indicating if data conforms to project card data schema</p> <code>facilities</code> <code>List[dict]</code> <p>List of all facility objects in project card</p> <code>facility</code> <code>Union[str, dict]</code> <p>either singular facility in project card or the string \u201cmultiple\u201d</p> <code>all_property_changes</code> <code>Union[str, dict]</code> <p>List of all property_changes objects in project card</p> <code>property_changes</code> <code>Union[str, dict]</code> <p>either singular property_changes in project card or the string \u201cmultiple\u201d</p> <code>change_types</code> <code>List[str]</code> <p>List of all project types in project card</p> <code>change_type</code> <code>str</code> <p>either singular project type in project card or the string \u201cmultiple\u201d</p> <code>sub_projects</code> <code>list[SubProject]</code> <p>list of sub_project objects</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>class ProjectCard(object):\n    \"\"\"Representation of a Project Card.\n\n    Attributes:\n        __dict__: Dictionary of project card attributes\n        valid: Boolean indicating if data conforms to project card data schema\n        facilities: List of all facility objects in project card\n        facility: either singular facility in project card or the string \"multiple\"\n        all_property_changes: List of all property_changes objects in project card\n        property_changes: either singular property_changes in project card or the string \"multiple\"\n        change_types: List of all project types in project card\n        change_type: either singular project type in project card or the string \"multiple\"\n        sub_projects: list of sub_project objects\n    \"\"\"\n\n    def __init__(self, attribute_dictonary: dict):\n        \"\"\"Constructor for ProjectCard object.\n\n        Args:\n            attribute_dictonary: a nested dictionary of attributes\n        \"\"\"\n        # add these first so they are first on write out\n        self.project: str = None\n        self.tags: list[str] = []\n        self.dependencies: dict = {}\n        self.sub_projects: list[SubProject] = []\n\n        self.__dict__.update(attribute_dictonary)\n        for sp in self.__dict__.get(\"changes\", []):\n            sp_obj = SubProject(sp, self)\n            self.sub_projects.append(sp_obj)\n\n    def __str__(self):\n        \"\"\"String representation of project card.\"\"\"\n        s = [\"{}: {}\".format(key, value) for key, value in self.__dict__.items()]\n        return \"\\n\".join(s)\n\n    def validate(self) -&gt; bool:\n        \"\"\"Return True if project card is valid, False otherwise.\"\"\"\n        return validate_card(self.__dict__)\n\n    @property\n    def valid(self) -&gt; bool:\n        \"\"\"Return True if project card is valid, False otherwise.\"\"\"\n        try:\n            self.validate()\n        except ProjectCardValidationError as e:\n            CardLogger.error(f\"Project {self.project} is not valid: {e}\")\n            return False\n        return True\n\n    @property\n    def facilities(self) -&gt; List[dict]:\n        \"\"\"Return all facilities from project card as list of dicts.\"\"\"\n        if any([\"transit\" in t for t in self.change_types]):\n            CardLogger.warning(\"Transit project doesn't have services.\")\n            return []\n        f = list(_findkeys(self.__dict__, \"facility\"))\n        if not f:\n            raise ProjectCardValidationError(\"Couldn't find facility in project card\")\n        return f\n\n    @property\n    def facility(self) -&gt; Union[str, dict]:\n        \"\"\"Return facility part of project card or \"multiple\" if more than one.\"\"\"\n        f = self.facilities\n        if len(f) &gt; 1:\n            return \"multiple\"\n        return f[0]\n\n    @property\n    def services(self) -&gt; List[dict]:\n        \"\"\"Return all services from project card as list of dicts.\"\"\"\n        if any([\"roadway\" in t for t in self.change_types]):\n            CardLogger.warning(\"Roadway project doesn't have services.\")\n            return []\n        s = list(_findkeys(self.__dict__, \"service\"))\n        if not s:\n            raise ProjectCardValidationError(\"Couldn't find service in project card\")\n        return s\n\n    @property\n    def service(self) -&gt; Union[str, dict]:\n        \"\"\"Return service part of from project card or \"multiple\" if more than one.\"\"\"\n        s = self.services\n        if len(s) &gt; 1:\n            return \"multiple\"\n        return s[0]\n\n    @property\n    def all_transit_property_changes(self) -&gt; List[dict]:\n        \"\"\"Return all transit property changes from project card.\"\"\"\n        if not any([\"transit_property_change\" in t for t in self.change_types]):\n            CardLogger.warning(f\"Project {self.project} doesn't have transit property changes.\")\n            return []\n        tp = list(_findkeys(self.__dict__, \"transit_property_change\"))\n        p = [i[\"property_changes\"] for i in tp]\n        return p\n\n    @property\n    def transit_property_change(self) -&gt; Union[str, dict]:\n        \"\"\"Return transit property change from project card or \"multiple if more than one.\"\"\"\n        p = self.all_transit_property_changes\n        if len(p) &gt; 1:\n            return \"multiple\"\n        return p[0]\n\n    @property\n    def all_transit_routing_changes(self) -&gt; List[dict]:\n        \"\"\"Return all transit routing changes from project card.\"\"\"\n        if not any([\"transit_routing_change\" in t for t in self.change_types]):\n            CardLogger.warning(f\"Project {self.project} doesn't have routing changes.\")\n            return []\n        r = list(_findkeys(self.__dict__, \"routing\"))\n        CardLogger.debug(f\"transit routing change: {r}\")\n        return r\n\n    @property\n    def transit_routing_change(self) -&gt; Union[str, dict]:\n        \"\"\"Return transit routing change from project card.\"\"\"\n        p = self.all_transit_routing_changes\n        if len(p) &gt; 1:\n            return \"multiple\"\n        return p[0]\n\n    @property\n    def change_types(self) -&gt; List[str]:\n        \"\"\"Returns list of all change types from project/subproject.\"\"\"\n        if self.sub_projects:\n            return [sp.change_type for sp in self.sub_projects]\n        _ignore = [\n            \"project\",\n            \"tags\",\n            \"notes\",\n            \"dependencies\",\n            \"self_obj_type\",\n            \"sub_projects\",\n            \"file\",\n        ]\n        type_keys = [k for k in self.__dict__.keys() if k not in _ignore]\n        if not type_keys:\n            raise ProjectCardValidationError(f\"Couldn't find type of project card {self.project}\")\n        return type_keys\n\n    @property\n    def change_type(self) -&gt; str:\n        \"\"\"Return single change type if single project or \"multiple\" if &gt;1 subproject.\"\"\"\n        t = self.change_types\n        if len(t) &gt; 1:\n            return \"multiple\"\n        return t[0]\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.all_transit_property_changes","title":"<code>all_transit_property_changes: List[dict]</code>  <code>property</code>","text":"<p>Return all transit property changes from project card.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.all_transit_routing_changes","title":"<code>all_transit_routing_changes: List[dict]</code>  <code>property</code>","text":"<p>Return all transit routing changes from project card.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.change_type","title":"<code>change_type: str</code>  <code>property</code>","text":"<p>Return single change type if single project or \u201cmultiple\u201d if &gt;1 subproject.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.change_types","title":"<code>change_types: List[str]</code>  <code>property</code>","text":"<p>Returns list of all change types from project/subproject.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.facilities","title":"<code>facilities: List[dict]</code>  <code>property</code>","text":"<p>Return all facilities from project card as list of dicts.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.facility","title":"<code>facility: Union[str, dict]</code>  <code>property</code>","text":"<p>Return facility part of project card or \u201cmultiple\u201d if more than one.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.service","title":"<code>service: Union[str, dict]</code>  <code>property</code>","text":"<p>Return service part of from project card or \u201cmultiple\u201d if more than one.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.services","title":"<code>services: List[dict]</code>  <code>property</code>","text":"<p>Return all services from project card as list of dicts.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.transit_property_change","title":"<code>transit_property_change: Union[str, dict]</code>  <code>property</code>","text":"<p>Return transit property change from project card or \u201cmultiple if more than one.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.transit_routing_change","title":"<code>transit_routing_change: Union[str, dict]</code>  <code>property</code>","text":"<p>Return transit routing change from project card.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.valid","title":"<code>valid: bool</code>  <code>property</code>","text":"<p>Return True if project card is valid, False otherwise.</p>"},{"location":"api/#projectcard.projectcard.ProjectCard.__init__","title":"<code>__init__(attribute_dictonary)</code>","text":"<p>Constructor for ProjectCard object.</p> <p>Parameters:</p> Name Type Description Default <code>attribute_dictonary</code> <code>dict</code> <p>a nested dictionary of attributes</p> required Source code in <code>projectcard/projectcard.py</code> <pre><code>def __init__(self, attribute_dictonary: dict):\n    \"\"\"Constructor for ProjectCard object.\n\n    Args:\n        attribute_dictonary: a nested dictionary of attributes\n    \"\"\"\n    # add these first so they are first on write out\n    self.project: str = None\n    self.tags: list[str] = []\n    self.dependencies: dict = {}\n    self.sub_projects: list[SubProject] = []\n\n    self.__dict__.update(attribute_dictonary)\n    for sp in self.__dict__.get(\"changes\", []):\n        sp_obj = SubProject(sp, self)\n        self.sub_projects.append(sp_obj)\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.__str__","title":"<code>__str__()</code>","text":"<p>String representation of project card.</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of project card.\"\"\"\n    s = [\"{}: {}\".format(key, value) for key, value in self.__dict__.items()]\n    return \"\\n\".join(s)\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.validate","title":"<code>validate()</code>","text":"<p>Return True if project card is valid, False otherwise.</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>def validate(self) -&gt; bool:\n    \"\"\"Return True if project card is valid, False otherwise.\"\"\"\n    return validate_card(self.__dict__)\n</code></pre>"},{"location":"api/#projectcard.projectcard.SubProject","title":"<code>SubProject</code>","text":"<p>               Bases: <code>ProjectCard</code></p> <p>Representation of a SubProject within a ProjectCard.</p> <p>Attributes:</p> Name Type Description <code>parent_project</code> <p>reference to parent ProjectCard object</p> <code>type</code> <p>project type</p> <code>tags</code> <code>str</code> <p>reference to parent project card tags</p> <code>dependencies</code> <code>str</code> <p>reference to parent project card\u2019s dependencies</p> <code>project</code> <code>str</code> <p>reference to the name of the parent project card\u2019s name</p> <code>facility</code> <code>dict</code> <p>facility selection dictionary</p> <code>property_changes</code> <code>dict</code> <p>property_changes dictionary</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>class SubProject(ProjectCard):\n    \"\"\"Representation of a SubProject within a ProjectCard.\n\n    Attributes:\n        parent_project: reference to parent ProjectCard object\n        type:  project type\n        tags: reference to parent project card tags\n        dependencies: reference to parent project card's dependencies\n        project: reference to the name of the parent project card's name\n        facility: facility selection dictionary\n        property_changes:property_changes dictionary\n    \"\"\"\n\n    def __init__(self, sp_dictionary: dict, parent_project: ProjectCard):\n        \"\"\"Constructor for SubProject object.\n\n        Args:\n            sp_dictionary (dict): dictionary of sub-project attributes contained within \"changes\"\n                list of parent projet card\n            parent_project (ProjectCard): ProjectCard object for parent project card\n        \"\"\"\n        self.parent_project = parent_project\n\n        if not len(sp_dictionary) == 1:\n            CardLogger.debug(f\"Invalid sp_dictionary with !=1 keys: {sp_dictionary.keys()}\")\n            raise SubprojectValidationError(\n                f\"Subproject of {parent_project.project} \\\n                 should only have one change. Did you forget to indent the rest of this change?.\"\n            )\n        self._change_type = list(sp_dictionary.keys())[0]\n        self.__dict__.update(sp_dictionary)\n        self.sub_projects = []\n\n    @property\n    def change_type(self) -&gt; str:\n        \"\"\"Return change type from subproject.\"\"\"\n        return self._change_type\n\n    @property\n    def project(self) -&gt; str:\n        \"\"\"Return project name from parent project card.\"\"\"\n        return self.parent_project.project\n\n    @property\n    def dependencies(self) -&gt; str:\n        \"\"\"Return dependencies from parent project card.\"\"\"\n        return self.parent_project.dependencies\n\n    @property\n    def tags(self) -&gt; str:\n        \"\"\"Return tags from parent project card.\"\"\"\n        return self.parent_project.tags\n\n    @property\n    def facility(self) -&gt; dict:\n        \"\"\"Return facility dictionary from subproject.\"\"\"\n        if \"facility\" not in self.__dict__:\n            raise SubprojectValidationError(\n                f\"Couldn't find facility in subproject in project card\\\n                                            {self.parent_project.project}\"\n            )\n        return self.__dict__[\"facility\"]\n\n    @property\n    def valid(self) -&gt; bool:\n        \"\"\"Check if subproject is valid.\"\"\"\n        return self.parent_project.valid\n</code></pre>"},{"location":"api/#projectcard.projectcard.SubProject.change_type","title":"<code>change_type: str</code>  <code>property</code>","text":"<p>Return change type from subproject.</p>"},{"location":"api/#projectcard.projectcard.SubProject.dependencies","title":"<code>dependencies: str</code>  <code>property</code>","text":"<p>Return dependencies from parent project card.</p>"},{"location":"api/#projectcard.projectcard.SubProject.facility","title":"<code>facility: dict</code>  <code>property</code>","text":"<p>Return facility dictionary from subproject.</p>"},{"location":"api/#projectcard.projectcard.SubProject.project","title":"<code>project: str</code>  <code>property</code>","text":"<p>Return project name from parent project card.</p>"},{"location":"api/#projectcard.projectcard.SubProject.tags","title":"<code>tags: str</code>  <code>property</code>","text":"<p>Return tags from parent project card.</p>"},{"location":"api/#projectcard.projectcard.SubProject.valid","title":"<code>valid: bool</code>  <code>property</code>","text":"<p>Check if subproject is valid.</p>"},{"location":"api/#projectcard.projectcard.SubProject.__init__","title":"<code>__init__(sp_dictionary, parent_project)</code>","text":"<p>Constructor for SubProject object.</p> <p>Parameters:</p> Name Type Description Default <code>sp_dictionary</code> <code>dict</code> <p>dictionary of sub-project attributes contained within \u201cchanges\u201d list of parent projet card</p> required <code>parent_project</code> <code>ProjectCard</code> <p>ProjectCard object for parent project card</p> required Source code in <code>projectcard/projectcard.py</code> <pre><code>def __init__(self, sp_dictionary: dict, parent_project: ProjectCard):\n    \"\"\"Constructor for SubProject object.\n\n    Args:\n        sp_dictionary (dict): dictionary of sub-project attributes contained within \"changes\"\n            list of parent projet card\n        parent_project (ProjectCard): ProjectCard object for parent project card\n    \"\"\"\n    self.parent_project = parent_project\n\n    if not len(sp_dictionary) == 1:\n        CardLogger.debug(f\"Invalid sp_dictionary with !=1 keys: {sp_dictionary.keys()}\")\n        raise SubprojectValidationError(\n            f\"Subproject of {parent_project.project} \\\n             should only have one change. Did you forget to indent the rest of this change?.\"\n        )\n    self._change_type = list(sp_dictionary.keys())[0]\n    self.__dict__.update(sp_dictionary)\n    self.sub_projects = []\n</code></pre>"},{"location":"api/#projectcard.io.ProjectCardReadError","title":"<code>ProjectCardReadError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Error in reading project card.</p> Source code in <code>projectcard/io.py</code> <pre><code>class ProjectCardReadError(Exception):\n    \"\"\"Error in reading project card.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.io.read_card","title":"<code>read_card(filepath, validate=False)</code>","text":"<p>Read single project card from a path and return project card object.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>file where the project card is.</p> required <code>validate</code> <code>bool</code> <p>if True, will validate the project card schemea</p> <code>False</code> Source code in <code>projectcard/io.py</code> <pre><code>def read_card(filepath: str, validate: bool = False):\n    \"\"\"Read single project card from a path and return project card object.\n\n    Args:\n        filepath: file where the project card is.\n        validate: if True, will validate the project card schemea\n    \"\"\"\n    if not Path(filepath).is_file():\n        raise FileNotFoundError(f\"Cannot find project card file: {filepath}\")\n    card_dict = read_cards(filepath, _cards={})\n    card = list(card_dict.values())[0]\n    if validate:\n        assert card.valid\n    return card\n</code></pre>"},{"location":"api/#projectcard.io.read_cards","title":"<code>read_cards(filepath, filter_tags=[], _cards={})</code>","text":"<p>Reads collection of project card files by inferring the file type.</p> <p>Lowercases all keys, but then replaces any that need to be uppercased using the REPLACE_KEYS mapping.  Needed to keep \u201cA\u201d and \u201cB\u201d uppercased.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[Collection[str], str]</code> <p>where the project card is.  A single path, list of paths, a directory, or a glob pattern.</p> required <code>filter_tags</code> <code>Collection[str]</code> <p>list of tags to filter by</p> <code>[]</code> <code>_cards</code> <code>Mapping[str, ProjectCard]</code> <p>dictionary of project cards to add to. Should not be used by user.</p> <code>{}</code> Source code in <code>projectcard/io.py</code> <pre><code>def read_cards(\n    filepath: Union[Collection[str], str],\n    filter_tags: Collection[str] = [],\n    _cards: Mapping[str, ProjectCard] = {},\n) -&gt; Mapping[str, ProjectCard]:\n    \"\"\"Reads collection of project card files by inferring the file type.\n\n    Lowercases all keys, but then replaces any that need to be uppercased using the\n    REPLACE_KEYS mapping.  Needed to keep \"A\" and \"B\" uppercased.\n\n    Args:\n        filepath: where the project card is.  A single path, list of paths,\n            a directory, or a glob pattern.\n        filter_tags: list of tags to filter by\n        _cards: dictionary of project cards to add to. Should not be used by user.\n\n    Returns: dictionary of project cards by project name\n    \"\"\"\n    CardLogger.debug(f\"Reading cards from {filepath}.\")\n\n    filter_tags = list(map(str.lower, filter_tags))\n    if isinstance(filepath, list) or not os.path.isfile(filepath):\n        _card_paths = _get_cardpath_list(filepath, valid_ext=_read_method_map.keys())\n        for p in _card_paths:\n            _cards.update(read_cards(p, filter_tags=filter_tags, _cards=_cards))\n        return _cards\n\n    _ext = os.path.splitext(filepath)[1]\n    if _ext not in _read_method_map.keys():\n        CardLogger.debug(f\"Unsupported file type for file {filepath}\")\n        raise ProjectCardReadError(f\"Unsupported file type: {_ext}\")\n    _card_dict = _read_method_map[_ext](filepath)\n    _card_dict = _change_keys(_card_dict)\n    _card_dict[\"file\"] = filepath\n    _project_name = _card_dict[\"project\"].lower()\n    if _project_name in _cards:\n        raise ProjectCardReadError(\n            f\"Names not unique from existing scenario projects: {_project_name}\"\n        )\n    if filter_tags and set(list(map(str.lower, _card_dict.get(\"tags\", [])))).isdisjoint(\n        set(filter_tags)\n    ):\n        CardLogger.debug(f\"Skipping {_project_name} - no overlapping tags with {filter_tags}.\")\n        return _cards\n    _cards[_project_name] = ProjectCard(_card_dict)\n\n    return _cards\n</code></pre>"},{"location":"api/#projectcard.io.write_card","title":"<code>write_card(project_card, filename=None)</code>","text":"<p>Writes project card dictionary to YAML file.</p> Source code in <code>projectcard/io.py</code> <pre><code>def write_card(project_card, filename: str = None):\n    \"\"\"Writes project card dictionary to YAML file.\"\"\"\n    if not filename:\n        filename = _make_slug(project_card.project) + \".yml\"\n    if not project_card.valid:\n        CardLogger.warning(f\"{project_card.project} Project Card not valid.\")\n    # import collections\n    # out_dict = collections.OrderedDict()\n    out_dict = {}\n    out_dict[\"project\"] = None\n    out_dict[\"tags\"] = \"\"\n    out_dict[\"dependencies\"] = \"\"\n    out_dict.update(project_card.__dict__)\n\n    with open(filename, \"w\") as outfile:\n        yaml.dump(out_dict, outfile, default_flow_style=False, sort_keys=False)\n\n    CardLogger.info(\"Wrote project card to: {}\".format(filename))\n</code></pre>"},{"location":"api/#projectcard.validate.ProjectCardJSONSchemaError","title":"<code>ProjectCardJSONSchemaError</code>","text":"<p>               Bases: <code>SchemaError</code></p> <p>Error in the ProjectCard json schema.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class ProjectCardJSONSchemaError(SchemaError):\n    \"\"\"Error in the ProjectCard json schema.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.ProjectCardValidationError","title":"<code>ProjectCardValidationError</code>","text":"<p>               Bases: <code>ValidationError</code></p> <p>Error in formatting of ProjectCard.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class ProjectCardValidationError(ValidationError):\n    \"\"\"Error in formatting of ProjectCard.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.PycodeError","title":"<code>PycodeError</code>","text":"<p>               Bases: <code>ProjectCardValidationError</code></p> <p>Basic runtime error in python code.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class PycodeError(ProjectCardValidationError):\n    \"\"\"Basic runtime error in python code.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.SubprojectValidationError","title":"<code>SubprojectValidationError</code>","text":"<p>               Bases: <code>ProjectCardValidationError</code></p> <p>Error in formatting of Subproject.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class SubprojectValidationError(ProjectCardValidationError):\n    \"\"\"Error in formatting of Subproject.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.package_schema","title":"<code>package_schema(schema_path=PROJECTCARD_SCHEMA, outfile_path=None)</code>","text":"<p>Consolidates referenced schemas into a single schema and writes it out.</p> <p>Parameters:</p> Name Type Description Default <code>schema_path</code> <code>Union[Path, str]</code> <p>Schema to read int and package. Defaults to PROJECTCARD_SCHEMA which is  ROOTDIR / \u201cschema\u201d / \u201cprojectcard.json\u201d.</p> <code>PROJECTCARD_SCHEMA</code> <code>outfile_path</code> <code>Union[Path, str]</code> <p>Where to write out packaged schema. Defaults to schema_path.basepath.packaged.json</p> <code>None</code> Source code in <code>projectcard/validate.py</code> <pre><code>def package_schema(\n    schema_path: Union[Path, str] = PROJECTCARD_SCHEMA,\n    outfile_path: Union[Path, str] = None,\n) -&gt; None:\n    \"\"\"Consolidates referenced schemas into a single schema and writes it out.\n\n    Args:\n        schema_path: Schema to read int and package. Defaults to PROJECTCARD_SCHEMA which is\n             ROOTDIR / \"schema\" / \"projectcard.json\".\n        outfile_path: Where to write out packaged schema. Defaults\n            to schema_path.basepath.packaged.json\n    \"\"\"\n    schema_path = Path(schema_path)\n    _s_data = _load_schema(schema_path)\n    if outfile_path is None:\n        outfile_path = schema_path.parent / f\"{schema_path.stem}packaged.{schema_path.suffix}\"\n    outfile_path = Path(outfile_path)\n    with open(outfile_path, \"w\") as outfile:\n        json.dump(_s_data, outfile, indent=4)\n    CardLogger.info(f\"Wrote {schema_path.stem} to {outfile_path.stem}\")\n</code></pre>"},{"location":"api/#projectcard.validate.validate_card","title":"<code>validate_card(jsondata, schema_path=PROJECTCARD_SCHEMA)</code>","text":"<p>Validates json-like data to specified schema.</p> <p>If <code>pycode</code> key exists, will evaluate it for basic runtime errors using Flake8. Note: will not flag any invalid use of RoadwayNetwork or TransitNetwork APIs.</p> <p>Parameters:</p> Name Type Description Default <code>jsondata</code> <code>dict</code> <p>json-like data to validate.</p> required <code>schema_path</code> <code>Union[str, Path]</code> <p>path to schema to validate to. Defaults to PROJECTCARD_SCHEMA which is ROOTDIR / \u201cschema\u201d / \u201cprojectcard.json\u201d</p> <code>PROJECTCARD_SCHEMA</code> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If jsondata doesn\u2019t conform to specified schema.</p> <code>SchemaError</code> <p>If schema itself is not valid.</p> Source code in <code>projectcard/validate.py</code> <pre><code>def validate_card(jsondata: dict, schema_path: Union[str, Path] = PROJECTCARD_SCHEMA) -&gt; bool:\n    \"\"\"Validates json-like data to specified schema.\n\n    If `pycode` key exists, will evaluate it for basic runtime errors using Flake8.\n    Note: will not flag any invalid use of RoadwayNetwork or TransitNetwork APIs.\n\n    Args:\n        jsondata: json-like data to validate.\n        schema_path: path to schema to validate to.\n            Defaults to PROJECTCARD_SCHEMA which is\n            ROOTDIR / \"schema\" / \"projectcard.json\"\n\n    Raises:\n        ValidationError: If jsondata doesn't conform to specified schema.\n        SchemaError: If schema itself is not valid.\n    \"\"\"\n    CardLogger.debug(f\"Validating: {jsondata['project']}\")\n    try:\n        _schema_data = _load_schema(schema_path)\n        validate(jsondata, schema=_schema_data)\n    except ValidationError as e:\n        CardLogger.error(f\"---- Error validating {jsondata['project']} ----\")\n        msg = f\"\\nRelevant schema: {e.schema}\\nValidator Value: {e.validator_value}\\nValidator: {e.validator}\"\n        msg += f\"\\nabsolute_schema_path:{e.absolute_schema_path}\\nabsolute_path:{e.absolute_path}\"\n        CardLogger.error(msg)\n        raise ProjectCardValidationError(f\"{e}\")\n    except SchemaError as e:\n        CardLogger.error(e)\n        raise ProjectCardJSONSchemaError(f\"{e}\")\n\n    if \"pycode\" in jsondata:\n        if \"self.\" in jsondata[\"pycode\"]:\n            if \"self_obj_type\" not in jsondata:\n                raise PycodeError(\n                    \"If using self, must specify what `self` refers to in yml frontmatter using self_obj_type: &lt;RoadwayNetwork|TransitNetwork&gt;\"\n                )\n        _validate_pycode(jsondata)\n\n    return True\n</code></pre>"},{"location":"api/#projectcard.validate.validate_schema_file","title":"<code>validate_schema_file(schema_path=PROJECTCARD_SCHEMA)</code>","text":"<p>Validates that a schema file is a valid JSON-schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_path</code> <code>Union[Path, str]</code> <p>description. Defaults to PROJECTCARD_SCHEMA which is ROOTDIR / \u201cschema\u201d / \u201cprojectcard.json\u201d.</p> <code>PROJECTCARD_SCHEMA</code> Source code in <code>projectcard/validate.py</code> <pre><code>def validate_schema_file(schema_path: Union[Path, str] = PROJECTCARD_SCHEMA) -&gt; bool:\n    \"\"\"Validates that a schema file is a valid JSON-schema.\n\n    Args:\n        schema_path: _description_. Defaults to PROJECTCARD_SCHEMA which is\n            ROOTDIR / \"schema\" / \"projectcard.json\".\n    \"\"\"\n    try:\n        _schema_data = _load_schema(schema_path)\n        # _resolver = _ref_resolver(schema_path,_schema_data)\n        validate({}, schema=_schema_data)  # ,resolver=_resolver)\n    except ValidationError:\n        pass\n    except SchemaError as e:\n        CardLogger.error(e)\n        raise ProjectCardJSONSchemaError(f\"{e}\")\n\n    return True\n</code></pre>"},{"location":"examples/","title":"Example Data","text":"<p>Example data can be found in the <code>/examples</code> directory.</p> Name Category example roadway multiple add and delete None Example property change for all links roadway_property_change Example I394 Parallel Lanes roadway_property_change example roadway add roadway_addition Bus Reroute transit_routing_change Example property change roadway_property_change example add simple managed lane project roadway_property_change Bus resign transit_property_change example delete roadway roadway_deletion Change node X value location roadway_property_change Blue Line Service Enhancement A transit_property_change example calculate mega freeways pycode"},{"location":"examples/#cards","title":"Cards","text":""},{"location":"examples/#example-roadway-multiple-add-and-delete","title":"example roadway multiple add and delete","text":"<p>Category: None <pre><code>project: example roadway multiple add and delete\ntags:\n  - 'add and delete roadway'\nchanges:\n  - roadway_addition:\n      nodes:\n      - model_node_id: 314159\n        X: -93.18389\n        Y: 44.96898\n        drive_node: 1\n        walk_node: 0\n        bike_node: 0\n        transit_node: 1\n  - roadway_deletion:\n      links:\n        model_link_id:\n          - 281\n          - 477533\n      nodes:\n        model_node_id:\n          - 314159\n  - roadway_addition:\n      links:\n      - A: 3230\n        B: 3262\n        model_link_id: 999998\n        trn_priority: 0\n        lanes: 1\n        name: new bike greenway and neighborhood st\n        bike_facility: 3\n        drive_access: 1\n        walk_access: 1\n        bike_access: 1\n        bus_only: 0\n        rail_only: 0\n        roadway: residential\n        distance: 0.10462\n        ttime_assert: 0.0\n        OPERATION_final: A\n      - A: 3262\n        B: 3230\n        model_link_id: 999997\n        trn_priority: 0\n        lanes: 1\n        name: new bike greenway and neighborhood st\n        bike_facility: 3\n        drive_access: 1\n        walk_access: 1\n        bike_access: 1\n        bus_only: 0\n        rail_only: 0\n        roadway: residential\n        distance: 0.10462\n        ttime_assert: 0.0\n        OPERATION_final: A\n      nodes:\n      - model_node_id: 354388\n        X: -93.18389\n        Y: 44.96898\n        drive_node: 1\n        walk_node: 0\n        bike_node: 0\n        transit_node: 1\nnotes: project card with multiple category of add and delete changes\n</code></pre></p>"},{"location":"examples/#example-property-change-for-all-links","title":"Example property change for all links","text":"<p>Category: roadway_property_change <pre><code>project: Example property change for all links\ntags:\n   - 'example'\nroadway_property_change:\n  facility:\n    links:\n      modes: ['drive']\n      all: 'True'\n      lanes: 2\n      bicycle_facility: [0,2,3]\n  property_changes:\n    lanes:\n      set: 1\n    bicycle_facility:\n      set: 1\nnotes: Reduce lanes and add separated bike facility for all drive links with two lanes and bicycle facility of 0,2, or 3\n</code></pre></p>"},{"location":"examples/#example-i394-parallel-lanes","title":"Example I394 Parallel Lanes","text":"<p>Category: roadway_property_change <pre><code>project: Example I394 Parallel Lanes\ntags: ['managed lanes']\nnotes: Need to adjust normal lanes\nroadway_property_change:\n  facility:\n    links:\n      model_link_id:\n        - 390239\n        - 391206\n        - 390344\n        - 401484\n  property_changes:\n    ML_lanes:\n      set: 0\n      scoped:\n      - timespan: ['6:00', '9:00']\n        set: 1\n      - timespan: ['15:00', '18:00']\n        set: 1\n    lanes:\n      change: 0\n      scoped:\n      - timespan: ['6:00', '9:00']\n        change: -1\n      - timespan: ['15:00', '18:00']\n        change: -1\n    segment_id:\n      set: 5\n    ML_HOV:\n      set: 5\n    HOV:\n      set: 5\n    ML_access_point:\n      set: [38765, 87982]\n    ML_egress_point:\n      set: [87993, 37457]\n</code></pre></p>"},{"location":"examples/#example-roadway-add","title":"example roadway add","text":"<p>Category: roadway_addition <pre><code>project: example roadway add\nnotes: Simple project card to add new roadway\ntags:\n  - 'add roadway'\n  - 'example'\nroadway_addition:\n  links:\n    - A: 269066\n      B: 268932\n      name: new neighborhood st\n      bike_access: 1\n      drive_access: 0\n      bus_only: 0\n      rail_only: 0\n      walk_access: 1\n      roadway: residential\n      lanes: 1\n      model_link_id: 404982\n    - A: 268932\n      B: 269066\n      bike_access: 1\n      name: new neighborhood st\n      drive_access: 0\n      bus_only: 0\n      rail_only: 0\n      walk_access: 1\n      roadway: residential\n      lanes: 1\n      model_link_id: 407042\n</code></pre></p>"},{"location":"examples/#bus-reroute","title":"Bus Reroute","text":"<p>Category: transit_routing_change <pre><code>project: Bus Reroute\ntags:\n   - existing_plus_committed\ntransit_routing_change:\n  service:\n    trip_properties:\n      route_id:\n        - 294-111\n      direction_id: 1\n  routing:\n    existing:\n      - -37582\n      - -37574\n      - -4761\n      - -4763\n      - -4764\n      - -98429\n      - 45985\n      - -57483\n      - -126324\n      - -57484\n      - 150855\n      - -11188\n      - 84899\n      - 46666\n      - -77077\n    set:\n      - -37582\n      - -37574\n      - -4761\n      - -4763\n      - -4764\n      - -98429\n      - 45985\n      - -57483\n      - -126324\n      - -57484\n      - 150855\n      - -11188\n      - 84899\n      - 46666\n      - -46665\n      - -46663\n      - -81820\n      - -76167\n      - -77077\n</code></pre></p>"},{"location":"examples/#example-property-change","title":"Example property change","text":"<p>Category: roadway_property_change <pre><code>project: Example property change\ntags:\n   - 'example'\nroadway_property_change:\n  facility:\n    links:\n      modes: ['drive','bike']\n      osm_link_id:\n        - '1234'\n        - '2345'\n    from:\n      osm_node_id: '4321'\n    to:\n      osm_node_id: '4322'\n  property_changes:\n    lanes:\n      set: 2\n    bicycle_facility:\n      set: 3\nnotes: Simple road diet\n</code></pre></p>"},{"location":"examples/#example-add-simple-managed-lane-project","title":"example add simple managed lane project","text":"<p>Category: roadway_property_change <pre><code>project: example add simple managed lane project\nnotes: Simple managed lane project with AM and PM lanes are HOT during the peak periods\ntags:\n   - 'example'\n   - 'managed'\nroadway_property_change:\n  facility:\n    links:\n      name:\n        - 'I 35E'\n    from:\n      osm_node_id: '961117623'\n    to:\n      osm_node_id: '2564047368'\n  property_changes:\n    segment_id:\n      set: 35EHOT-A\n    lanes:\n      set: 3\n      scoped:\n        - timespan: ['6:00', '9:00']\n          set: 2\n        - timespan: ['16:00', '19:00']\n          set: 2\n    ML_lanes:\n      set: 0\n      scoped:\n        - timespan: ['6:00', '9:00']\n          set: 1\n        - timespan: ['16:00', '19:00']\n          set: 1\n    ML_price:\n      set: 0\n      scoped:\n        - timespan: ['6:00', '9:00']\n          category: ['sov']\n          set: 1.5\n        - timespan: ['16:00', '19:00']\n          category: ['sov']\n          set: 2.5\n        - timespan: ['6:00', '9:00']\n          category: ['hov2']\n          set: 1.0\n        - timespan: ['16:00', '19:00']\n          category: ['hov2']\n          set: 2.0\n    ML_access_point:\n      set: 'all'\n    ML_egress_point:\n      set: 'all'\n</code></pre></p>"},{"location":"examples/#bus-resign","title":"Bus resign","text":"<p>Category: transit_property_change <pre><code>project: Bus resign\ntags:\n   - existing_plus_committed\ntransit_property_change:\n  service:\n    trip_properties:\n      route_id:\n        - \"294-111\"\n    nodes:\n      model_node_id:\n        - 37582\n        - 37574\n      require: \"any\"\n  property_changes:\n    trip_headsign:\n      change: \" thru Union Station\"\n</code></pre></p>"},{"location":"examples/#example-delete-roadway","title":"example delete roadway","text":"<p>Category: roadway_deletion <pre><code>project: example delete roadway\nnotes: project card with multiple category of add and delete changes\ntags:\n  - 'delete roadway'\n  - 'example'\nroadway_deletion:\n  links:\n    model_link_id:\n      - 281\n      - 477533\n  nodes:\n    model_node_id:\n      - 314159\n</code></pre></p>"},{"location":"examples/#change-node-x-value-location","title":"Change node X value location","text":"<p>Category: roadway_property_change <pre><code>project: Change node X value location\nroadway_property_change:\n  facility:\n    nodes:\n      model_node_id: [1234]\n  property_changes:\n    X:\n      set: 1.0\n</code></pre></p>"},{"location":"examples/#blue-line-service-enhancement-a","title":"Blue Line Service Enhancement A","text":"<p>Category: transit_property_change <pre><code>project: Blue Line Service Enhancement A\ntags:\n   - example\ntransit_property_change:\n  service:\n    trip_properties:\n      trip_id:\n        - 14940701-JUN19-MVS-BUS-Weekday-01\n    timespans:\n      - ['06:00:00', '09:00:00']\n  property_changes:\n    headway_secs:\n      set: 900\n</code></pre></p>"},{"location":"examples/#example-calculate-mega-freeways","title":"example calculate mega freeways","text":"<p>Category: pycode <pre><code>---\nproject: example calculate mega freeways\nself_obj_type: RoadwayNetwork\n---\n\nself.links_df.loc[self.links_df['lanes'] == 4, 'lanes'] = 12\n</code></pre></p>"},{"location":"json-schemas/","title":"Macro Rendering Error","text":"<p>File: <code>json-schemas.md</code></p> <p>ModuleNotFoundError: No module named \u2018json_schema_for_humans\u2019</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/mkdocs_macros/plugin.py\", line 527, in render\n    return md_template.render(**page_variables)\n  File \"/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 1304, in render\n    self.environment.handle_exception()\n  File \"/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 939, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/home/runner/work/projectcard/projectcard/main.py\", line 22, in document_schema\n    from json_schema_for_humans.generate import generate_from_schema\nModuleNotFoundError: No module named 'json_schema_for_humans'\n</code></pre>"},{"location":"pydantic-datamodels/","title":"Pydantic Data Models","text":"<p>Warning</p> <p>The switch from json-schema to Pydantic is  WIP.</p> <p>Access to pydantic data models for the projectcard package generated from /schema jsonschema files.</p> <p>Checks if pydantic v1 vs v2 is installed and imports corresponding data models. If pydantic is not installed, its functionality will be \u201cmocked\u201d so that the project card package can be used without pydantic.</p> <p>NOTE: if pydantic is not installed they will provide no actual functionality (but they shouldn\u2019t crash either)</p> <p>Helper classes for time and timespan representation.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Time","title":"<code>PC_Time</code>","text":"<p>Project Card Time representation.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>@dataclass\nclass PC_Time:\n    \"\"\"Project Card Time representation.\"\"\"\n    time: PC_TimeString\n\n    @property\n    def datetime(self):\n        if self.time is str:\n            if len(self.time.split(\":\")) == 2:\n                return datetime.datetime.strptime(self.time, \"%H:%M\")\n            else:\n                return datetime.datetime.strptime(self.time, \"%H:%M:%S\")\n        elif self.time is time:\n            return self.time\n        else:\n            raise TimeFormatError(\"time must be a string or time object\")\n\n    @property\n    def time_sec(self):\n        \"\"\"Time in seconds since midnight.\"\"\"\n        return (\n            self.datetime.hour * 3600 + self.datetime.minute * 60 + self.datetime.second\n        )\n</code></pre>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Time.time_sec","title":"<code>time_sec</code>  <code>property</code>","text":"<p>Time in seconds since midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan","title":"<code>PC_Timespan</code>","text":"<p>Project Card Timespan representation.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>@dataclass\nclass PC_Timespan:\n    \"\"\"Project Card Timespan representation.\"\"\"\n    timespan: PC_TimeSpanString\n\n    @property\n    def start_time(self):\n        \"\"\"Start time of the timespan.\"\"\"\n        return self.timespan[0].time\n\n    @property\n    def end_time(self):\n        \"\"\"End time of the timespan.\"\"\"\n        return self.timespan[1].time\n\n    @property\n    def start_time_dt(self):\n        \"\"\"Start time as a datetime object.\"\"\"\n        return self.timespan[0].datetime\n\n    @property\n    def end_time_dt(self):\n        \"\"\"End time as a datetime object.\"\"\"\n        return self.timespan[1].datetime\n\n    @property\n    def duration_dt(self):\n        \"\"\"Returns a datetime.timedelta object representing the duration of the timespan.\n\n        If end_time is less than start_time, the duration will assume that it crosses over\n        midnight.\n        \"\"\"\n        if self.end_time_dt &lt; self.start_time_dt:\n            return datetime.timedelta(\n                hours=24 - self.start_time_dt.hour + self.end_time_dt.hour,\n                minutes=self.end_time_dt.minute - self.start_time_dt.minute,\n                seconds=self.end_time_dt.second - self.start_time_dt.second,\n            )\n        else:\n            return self.end_time_dt - self.start_time_dt\n\n    @property\n    def start_time_sec(self):\n        \"\"\"Start time in seconds since midnight.\"\"\"\n        return self.timespan[0].time_sec\n\n    @property\n    def end_time_sec(self):\n        \"\"\"End time in seconds since midnight.\"\"\"\n        return self.timespan[1].time_sec\n\n    @property\n    def duration_sec(self):\n        \"\"\"Duration of timespan in seconds.\n\n        If end_time is less than start_time, the duration will assume that it crosses over\n        midnight.\n        \"\"\"\n        if self.end_time_sec &lt; self.start_time_sec:\n            return (24 * 3600) - self.start_time_sec + self.end_time_sec\n        else:\n            return self.end_time_sec - self.start_time_sec\n</code></pre>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.duration_dt","title":"<code>duration_dt</code>  <code>property</code>","text":"<p>Returns a datetime.timedelta object representing the duration of the timespan.</p> <p>If end_time is less than start_time, the duration will assume that it crosses over midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.duration_sec","title":"<code>duration_sec</code>  <code>property</code>","text":"<p>Duration of timespan in seconds.</p> <p>If end_time is less than start_time, the duration will assume that it crosses over midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.end_time","title":"<code>end_time</code>  <code>property</code>","text":"<p>End time of the timespan.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.end_time_dt","title":"<code>end_time_dt</code>  <code>property</code>","text":"<p>End time as a datetime object.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.end_time_sec","title":"<code>end_time_sec</code>  <code>property</code>","text":"<p>End time in seconds since midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.start_time","title":"<code>start_time</code>  <code>property</code>","text":"<p>Start time of the timespan.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.start_time_dt","title":"<code>start_time_dt</code>  <code>property</code>","text":"<p>Start time as a datetime object.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.PC_Timespan.start_time_sec","title":"<code>start_time_sec</code>  <code>property</code>","text":"<p>Start time in seconds since midnight.</p>"},{"location":"pydantic-datamodels/#projectcard.models.time.TimeFormatError","title":"<code>TimeFormatError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in the time format.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>class TimeFormatError(Exception):\n    \"\"\"Exception raised for errors in the time format.\"\"\"\n    pass\n</code></pre>"},{"location":"pydantic-datamodels/#projectcard.models.time.TimespanFormatError","title":"<code>TimespanFormatError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in the timespan format.</p> Source code in <code>projectcard/models/time.py</code> <pre><code>class TimespanFormatError(Exception):\n    \"\"\"Exception raised for errors in the timespan format.\"\"\"\n    pass\n</code></pre>"}]}