# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Publish Python Package üì¶ to PyPI and TestPyPI
on:
  push:
    branches: [main]
  release:
      types: [created]
  workflow_dispatch:  # Manual trigger for both PyPI and TestPyPI
    inputs:
      publish_target:
        description: 'Publish Target (pypi/testpypi)'
        required: true
        default: 'testpypi'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get current version
        run: |
          current_version=$(grep -oP '(?<=__version__ = ")[^"]*' projectcard/__init__.py)
          echo "current_version=$current_version" >> $GITHUB_ENV
      - name: Get previous version
        run: |
          previous_version=$(git show HEAD~1:projectcard/__init__.py | grep -oP '(?<=__version__ = ")[^"]*')
          echo "previous_version=$previous_version" >> $GITHUB_ENV
      - name: Check if version changed
        id: check_version
        run: |
          if [ "$current_version" != "$previous_version" ]; then
            echo "version_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "version_changed=false" >>"$GITHUB_OUTPUT"
  build:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_target == 'testpypi') || (github.event_name == 'release' && github.event.action == 'created')
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_target == 'pypi')
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/projectcard
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs:
    - check-version
    - build
    if: (needs.check-version.outputs.version_changed == 'true' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_target == 'testpypi')
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/projectcard
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
