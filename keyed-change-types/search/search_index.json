{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Cards","text":""},{"location":"#schema","title":"Schema","text":"<p>The ProjectCard schema is represented as a json-schema in the <code>/schema</code> directory and is documented on the schemas page.</p>"},{"location":"#example-data","title":"Example Data","text":"<p>Example project cards can be found in the <code>/examples</code> directory and on the examples page</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from projectcard.io import read_cards\n\n# Read in cards from a directory with the tag \"Baseline 2030\"\nproject_cards = read_cards(directory, filter_tags=[\"Baseline2030\"])\n\n# Iterate through a deck of cards for validity\nfor project_name,card in project_cards.items():\n    print(f\"{project_name}: {card.valid}\")\n\n# Print out a summary of the card with the project name \"4th Ave Busway\"\nprint(project_cards[\"4th Ave Busway\"])\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Generally it is not necessary to install the projectcard package as the main purpose of this repository is to maintain the project card schema.</p>"},{"location":"#development-environment","title":"Development Environment","text":"<ol> <li> <p>Fork and clone repo locally</p> </li> <li> <p>Install dependencies</p> </li> </ol> <pre><code>conda install --yes --file requirements.txt\n</code></pre> <p>or</p> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Install from working directory</li> </ol> <pre><code>pip install -e .\n</code></pre>"},{"location":"#production-environment","title":"Production Environment","text":"<pre><code>pip install git+https://github.com/network-wrangler/projectcard@main#egg=projectcard\n</code></pre>"},{"location":"api/","title":"API","text":""},{"location":"api/#projectcard.projectcard","title":"<code>projectcard.projectcard</code>","text":""},{"location":"api/#projectcard.projectcard.ProjectCard","title":"<code>ProjectCard</code>","text":"<p>         Bases: <code>object</code></p> <p>Representation of a Project Card</p> <p>Attributes:</p> Name Type Description <code>__dict__</code> <p>Dictionary of project card attributes</p> <code>valid</code> <code>bool</code> <p>Boolean indicating if data conforms to project card data schema</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>class ProjectCard(object):\n\"\"\"\n    Representation of a Project Card\n\n    Attributes:\n        __dict__: Dictionary of project card attributes\n        valid: Boolean indicating if data conforms to project card data schema\n    \"\"\"\n\n    def __init__(self, attribute_dictonary: dict):\n\"\"\"\n        Constructor\n\n        args:\n            attribute_dictonary: a nested dictionary of attributes\n        \"\"\"\n        # add these first so they are first on write out\n        self.project = None\n        self.tags = []\n        self.dependencies = {}\n\n        self.__dict__.update(attribute_dictonary)\n\n    def __str__(self):\n        s = [\"{}: {}\".format(key, value) for key, value in self.__dict__.items()]\n        return \"\\n\".join(s)\n\n    @property\n    def valid(self) -&gt; bool:\n        return validate_card(self.__dict__)\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.__init__","title":"<code>__init__(attribute_dictonary)</code>","text":"<p>Constructor</p> <p>Parameters:</p> Name Type Description Default <code>attribute_dictonary</code> <code>dict</code> <p>a nested dictionary of attributes</p> required Source code in <code>projectcard/projectcard.py</code> <pre><code>def __init__(self, attribute_dictonary: dict):\n\"\"\"\n    Constructor\n\n    args:\n        attribute_dictonary: a nested dictionary of attributes\n    \"\"\"\n    # add these first so they are first on write out\n    self.project = None\n    self.tags = []\n    self.dependencies = {}\n\n    self.__dict__.update(attribute_dictonary)\n</code></pre>"},{"location":"api/#projectcard.io","title":"<code>projectcard.io</code>","text":""},{"location":"api/#projectcard.io.read_cards","title":"<code>read_cards(filepath, filter_tags=[], _cards={})</code>","text":"<p>Reads collection of project card files by inferring the file type.</p> <p>Lowercases all keys, but then replaces any that need to be uppercased using the REPLACE_KEYS mapping.  Needed to keep \u201cA\u201d and \u201cB\u201d uppercased.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>where the project card is.  A single path, list of paths, a directory, or a glob pattern.</p> required Source code in <code>projectcard/io.py</code> <pre><code>def read_cards(\n    filepath: str,\n    filter_tags: Collection[str] = [],\n    _cards: Mapping[str, ProjectCard] = {},\n) -&gt; Mapping[str, ProjectCard]:\n\"\"\"Reads collection of project card files by inferring the file type.\n\n    Lowercases all keys, but then replaces any that need to be uppercased using the\n    REPLACE_KEYS mapping.  Needed to keep \"A\" and \"B\" uppercased.\n\n    Args:\n        filepath: where the project card is.  A single path, list of paths,\n            a directory, or a glob pattern.\n\n    Returns: dictionary of project cards by project name\n    \"\"\"\n    filter_tags = list(map(str.lower, filter_tags))\n    if not Path(filepath).is_file():\n        _card_paths = _get_cardpath_list(filepath, valid_ext=_method_map.keys())\n        for p in _card_paths:\n            _cards.update(read_cards(p, filter_tags=filter_tags, _cards=_cards))\n        return _cards\n\n    _ext = os.path.splitext(filepath)[1]\n    if _ext not in _method_map.keys():\n        raise ValueError(\"Unsupported file type: {}\".format(_ext))\n    _card_dict = _method_map[_ext](filepath)\n    _card_dict = _change_keys(_card_dict)\n    _card_dict[\"file\"] = filepath\n    _project_name = _card_dict[\"project\"].lower()\n    if _project_name in _cards:\n        raise ValueError(\n            f\"Names not unique from existing scenario projects: {_project_name}\"\n        )\n    if filter_tags and set(list(map(str.lower, _card_dict.get(\"tags\", [])))).isdisjoint(\n        set(filter_tags)\n    ):\n        CardLogger.debug(\n            f\"Skipping {_project_name} - no overlapping tags with {filter_tags}.\"\n        )\n        return _cards\n    _cards[_project_name] = ProjectCard(_card_dict)\n\n    return _cards\n</code></pre>"},{"location":"api/#projectcard.io.write_card","title":"<code>write_card(project_card, filename=None)</code>","text":"<p>Writes project card dictionary to YAML file</p> Source code in <code>projectcard/io.py</code> <pre><code>def write_card(project_card, filename: str = None):\n\"\"\"\n    Writes project card dictionary to YAML file\n    \"\"\"\n    if not filename:\n        filename = _make_slug(project_card.project) + \".yml\"\n    if not project_card.valid:\n        CardLogger.warning(f\"{project_card.project} Project Card not valid.\")\n    # import collections\n    # out_dict = collections.OrderedDict()\n    out_dict = {}\n    out_dict[\"project\"] = None\n    out_dict[\"tags\"] = \"\"\n    out_dict[\"dependencies\"] = \"\"\n    out_dict.update(project_card.__dict__)\n\n    with open(filename, \"w\") as outfile:\n        yaml.dump(out_dict, outfile, default_flow_style=False, sort_keys=False)\n\n    CardLogger.info(\"Wrote project card to: {}\".format(filename))\n</code></pre>"},{"location":"api/#projectcard.validate","title":"<code>projectcard.validate</code>","text":""},{"location":"api/#projectcard.validate.PycodeError","title":"<code>PycodeError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Basic runtime error in python code.</p> Source code in <code>projectcard/validate.py</code> <pre><code>class PycodeError(Exception):\n    \"Basic runtime error in python code.\"\n    pass\n</code></pre>"},{"location":"api/#projectcard.validate.package_schema","title":"<code>package_schema(schema_path=PROJECTCARD_SCHEMA, outfile_path=None)</code>","text":"<p>Consolidates referenced schemas into a single schema and writes it out.</p> <p>Parameters:</p> Name Type Description Default <code>schema_path</code> <code>Union[Path, str]</code> <p>Schema to read int and package. Defaults to PROJECTCARD_SCHEMA which is os.path.join(ROOTDIR, \u201cschema\u201d, \u201cprojectcard.json\u201d).</p> <code>PROJECTCARD_SCHEMA</code> <code>outfile_path</code> <code>Union[Path, str]</code> <p>Where to write out packaged schema. Defaults to schema_path.basepath.packaged.json</p> <code>None</code> Source code in <code>projectcard/validate.py</code> <pre><code>def package_schema(\n    schema_path: Union[Path, str] = PROJECTCARD_SCHEMA,\n    outfile_path: Union[Path, str] = None,\n) -&gt; None:\n\"\"\"Consolidates referenced schemas into a single schema and writes it out.\n\n    Args:\n        schema_path: Schema to read int and package. Defaults to PROJECTCARD_SCHEMA which is\n            os.path.join(ROOTDIR, \"schema\", \"projectcard.json\").\n        outfile_path: Where to write out packaged schema. Defaults\n            to schema_path.basepath.packaged.json\n    \"\"\"\n    schema_path = Path(schema_path)\n    _s_data = _load_schema(schema_path)\n    if outfile_path is None:\n        outfile_path = (\n            schema_path.parent / f\"{schema_path.stem}packaged.{schema_path.suffix}\"\n        )\n    outfile_path = Path(outfile_path)\n    with open(outfile_path, \"w\") as outfile:\n        json.dump(_s_data, outfile, indent=4)\n    CardLogger.info(f\"Wrote {schema_path.stem} to {outfile_path.stem}\")\n</code></pre>"},{"location":"api/#projectcard.validate.validate_card","title":"<code>validate_card(jsondata, schema_path=PROJECTCARD_SCHEMA)</code>","text":"<p>Validates json-like data to specified schema.</p> <p>If <code>pycode</code> key exists, will evaluate it for basic runtime errors using Flake8. Note: will not flag any invalid use of RoadwayNetwork or TransitNetwork APIs.</p> <p>Parameters:</p> Name Type Description Default <code>jsondata</code> <code>dict</code> <p>json-like data to validate.</p> required <code>schema_path</code> <code>Union[str, Path]</code> <p>path to schema to validate to. Defaults to PROJECTCARD_SCHEMA which is os.path.join(ROOTDIR, \u201cschema\u201d, \u201cprojectcard.json\u201d)</p> <code>PROJECTCARD_SCHEMA</code> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If jsondata doesn\u2019t conform to specified schema.</p> <code>SchemaError</code> <p>If schema itself is not valid.</p> Source code in <code>projectcard/validate.py</code> <pre><code>def validate_card(\n    jsondata: dict, schema_path: Union[str, Path] = PROJECTCARD_SCHEMA\n) -&gt; bool:\n\"\"\"Validates json-like data to specified schema.\n\n    If `pycode` key exists, will evaluate it for basic runtime errors using Flake8.\n    Note: will not flag any invalid use of RoadwayNetwork or TransitNetwork APIs.\n\n    Args:\n        jsondata: json-like data to validate.\n        schema_path: path to schema to validate to.\n            Defaults to PROJECTCARD_SCHEMA which is\n            os.path.join(ROOTDIR, \"schema\", \"projectcard.json\")\n\n    Raises:\n        ValidationError: If jsondata doesn't conform to specified schema.\n        SchemaError: If schema itself is not valid.\n    \"\"\"\n\n    CardLogger.debug(f\"Validating: {jsondata['project']}\")\n    try:\n        _schema_data = _load_schema(schema_path)\n        validate(jsondata, schema=_schema_data)\n    except ValidationError as e:\n        CardLogger.error(f\"---- Error validating {jsondata['project']} ----\")\n        msg = f\"\\nRelevant schema: {e.schema}\\nValidator Value: {e.validator_value}\\nValidator: {e.validator}\"\n        msg += f\"\\nabsolute_schema_path:{e.absolute_schema_path}\\nabsolute_path:{e.absolute_path}\"\n        CardLogger.error(msg)\n        raise ValidationError(f\"{e}\")\n    except SchemaError as e:\n        CardLogger.error(e)\n        raise SchemaError(f\"{e}\")\n\n    if \"pycode\" in jsondata:\n        _validate_pycode(jsondata)\n\n    return True\n</code></pre>"},{"location":"api/#projectcard.validate.validate_schema_file","title":"<code>validate_schema_file(schema_path=PROJECTCARD_SCHEMA)</code>","text":"<p>Validates that a schema file is a valid JSON-schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_path</code> <code>Union[Path, str]</code> <p>description. Defaults to PROJECTCARD_SCHEMA which is  os.path.join(ROOTDIR, \u201cschema\u201d, \u201cprojectcard.json\u201d).</p> <code>PROJECTCARD_SCHEMA</code> Source code in <code>projectcard/validate.py</code> <pre><code>def validate_schema_file(schema_path: Union[Path, str] = PROJECTCARD_SCHEMA) -&gt; bool:\n\"\"\"Validates that a schema file is a valid JSON-schema.\n\n    Args:\n        schema_path: _description_. Defaults to PROJECTCARD_SCHEMA which is\n             os.path.join(ROOTDIR, \"schema\", \"projectcard.json\").\n    \"\"\"\n    try:\n        _schema_data = _load_schema(schema_path)\n        # _resolver = _ref_resolver(schema_path,_schema_data)\n        validate({}, schema=_schema_data)  # ,resolver=_resolver)\n    except ValidationError:\n        pass\n    except SchemaError as e:\n        CardLogger.error(e)\n        raise SchemaError(f\"{e}\")\n\n    return True\n</code></pre>"},{"location":"examples/","title":"Macro Rendering Error","text":"<p>KeyError: \u2018changes\u2019</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/mkdocs_macros/plugin.py\", line 480, in render\n    return md_template.render(**page_variables)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 5, in top-level template code\n  File \"/home/runner/work/projectcard/projectcard/main.py\", line 161, in list_examples\n    _md_table += _card_to_mdrow(_card, table_fields)\n  File \"/home/runner/work/projectcard/projectcard/main.py\", line 155, in _card_to_mdrow\n    _md_row += f\"{_categories_as_str(card)}\" \" |\\n\"\n  File \"/home/runner/work/projectcard/projectcard/main.py\", line 111, in _categories_as_str\n    if len(card.__dict__[\"changes\"]) == 1:\nKeyError: 'changes'\n</code></pre>"},{"location":"schemas/","title":"Schema DocumentationProject Card Schema","text":"<p> Expand all Collapse all </p> <pre><code>&lt;div class=\"breadcrumbs\"&gt;&lt;/div&gt;&lt;br/&gt;\n</code></pre> One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li><li> Option 5 </li><li> Option 6 </li><li> Option 7 </li></ul> root          oneOf item 0Type: object The following properties are required: <ul><li>roadway_deletion</li></ul> root          oneOf item 1Type: object The following properties are required: <ul><li>roadway_addition</li></ul> root          oneOf item 2Type: object The following properties are required: <ul><li>roadway_property_change</li></ul> root          oneOf item 3Type: object The following properties are required: <ul><li>roadway_managed_lanes</li></ul> root          oneOf item 4Type: object The following properties are required: <ul><li>transit_property_change</li></ul> root          oneOf item 5Type: object The following properties are required: <ul><li>changes</li></ul> root          oneOf item 6Type: object The following properties are required: <ul><li>self</li></ul> $schema root          $schemaType: string <p>Reference to the project card schema which this file uses. If not specified, will be assumed to be the most recent release.</p> project Required root          projectType: string <p>A project name which uniquely identifies this project</p> dependencies root          dependenciesType: object No Additional Properties prerequisites root          dependencies prerequisitesType: array Example: <pre>\"7th St E Road Diet\"\n</pre> corequisites root          dependencies corequisitesType: array Example: <pre>\"7th St E Road Diet\"\n</pre> conflicts root          dependencies conflictsType: array Example: <pre>\"7th St E Road Diet\"\n</pre> tags root          tagsType: array of string Each item of this array must be: root          tags tags itemsType: string Example: <pre>\"vision2050\"\n</pre> roadway_deletion root          roadway_deletionType: object Same definition as roadway_deletion roadway_addition root          roadway_additionType: object Same definition as roadway_addition roadway_property_change root          roadway_property_changeType: object Same definition as roadway_property_change roadway_managed_lanes root          roadway_managed_lanesType: object Same definition as roadway_managed_lanes transit_property_change root          transit_property_changeType: object Same definition as transit_property_change changes root          changesType: array Each item of this array must be: root          changes changeType: object One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li><li> Option 5 </li></ul> root          changes changes items oneOf item 0Type: object The following properties are required: <ul><li>roadway_deletion</li></ul> root          changes changes items oneOf item 1Type: object The following properties are required: <ul><li>roadway_addition</li></ul> root          changes changes items oneOf item 2Type: object The following properties are required: <ul><li>roadway_property_change</li></ul> root          changes changes items oneOf item 3Type: object The following properties are required: <ul><li>roadway_managed_lanes</li></ul> root          changes changes items oneOf item 4Type: object The following properties are required: <ul><li>transit_property_change</li></ul> roadway_deletion root          changes changes items roadway_deletionType: object Same definition as roadway_deletion roadway_addition root          changes changes items roadway_additionType: object Same definition as roadway_addition roadway_property_change root          changes changes items roadway_property_changeType: object Same definition as roadway_property_change roadway_managed_lanes root          changes changes items roadway_managed_lanesType: object Same definition as roadway_managed_lanes transit_property_change root          changes changes items transit_property_changeType: object Same definition as transit_property_change self root          selfType: enum (of string) <p>For calculated project cards, must refer to the object to perform the calculation on. </p> Must be one of: <ul><li>\"RoadwayNetwork\"</li><li>\"TransitNetwork\"</li></ul> notes root          notesType: string"}]}