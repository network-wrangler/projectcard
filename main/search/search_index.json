{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Cards","text":"<p>{{ include_file(\u2018README.md\u2019, start_line = 2, downshift_h1= False) }}</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#projectcard.projectcard","title":"<code>projectcard.projectcard</code>","text":""},{"location":"api/#projectcard.projectcard.ProjectCard","title":"<code>ProjectCard</code>","text":"<p>         Bases: <code>object</code></p> <p>Representation of a Project Card</p> <p>Attributes:</p> Name Type Description <code>__dict__</code> <p>Dictionary of project card attributes</p> <code>valid</code> <code>bool</code> <p>Boolean indicating if data conforms to project card data schema</p> Source code in <code>projectcard/projectcard.py</code> <pre><code>class ProjectCard(object):\n\"\"\"\n    Representation of a Project Card\n\n    Attributes:\n        __dict__: Dictionary of project card attributes\n        valid: Boolean indicating if data conforms to project card data schema\n    \"\"\"\n\n    def __init__(self, attribute_dictonary: dict):\n\"\"\"\n        Constructor\n\n        args:\n            attribute_dictonary: a nested dictionary of attributes\n        \"\"\"\n        # add these first so they are first on write out\n        self.project = None\n        self.tags = \"\"\n        self.dependencies = \"\"\n\n        self.__dict__.update(attribute_dictonary)\n\n    def __str__(self):\n        s = [\"{}: {}\".format(key, value) for key, value in self.__dict__.items()]\n        return \"\\n\".join(s)\n\n    @property\n    def valid(self) -&gt; bool:\n        return validate_card(self.__dict__)\n</code></pre>"},{"location":"api/#projectcard.projectcard.ProjectCard.__init__","title":"<code>__init__(attribute_dictonary)</code>","text":"<p>Constructor</p> <p>Parameters:</p> Name Type Description Default <code>attribute_dictonary</code> <code>dict</code> <p>a nested dictionary of attributes</p> required Source code in <code>projectcard/projectcard.py</code> <pre><code>def __init__(self, attribute_dictonary: dict):\n\"\"\"\n    Constructor\n\n    args:\n        attribute_dictonary: a nested dictionary of attributes\n    \"\"\"\n    # add these first so they are first on write out\n    self.project = None\n    self.tags = \"\"\n    self.dependencies = \"\"\n\n    self.__dict__.update(attribute_dictonary)\n</code></pre>"},{"location":"api/#projectcard.io","title":"<code>projectcard.io</code>","text":""},{"location":"api/#projectcard.io.read_cards","title":"<code>read_cards(filepath, filter_tags=[], _cards={})</code>","text":"<p>Reads collection of project card files by inferring the file type.</p> <p>Lowercases all keys, but then replaces any that need to be uppercased using the REPLACE_KEYS mapping.  Needed to keep \u201cA\u201d and \u201cB\u201d uppercased.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>where the project card is.  A single path, list of paths, a directory, or a glob pattern.</p> required Source code in <code>projectcard/io.py</code> <pre><code>def read_cards(\n    filepath: str,\n    filter_tags: Collection[str] = [],\n    _cards: Mapping[str, ProjectCard] = {},\n) -&gt; Mapping[str, ProjectCard]:\n\"\"\"Reads collection of project card files by inferring the file type.\n\n    Lowercases all keys, but then replaces any that need to be uppercased using the\n    REPLACE_KEYS mapping.  Needed to keep \"A\" and \"B\" uppercased.\n\n    Args:\n        filepath: where the project card is.  A single path, list of paths,\n            a directory, or a glob pattern.\n\n    Returns: dictionary of project cards by project name\n    \"\"\"\n    _filter_tags = map(str.lower, filter_tags)\n    if not Path(filepath).is_file():\n        _card_paths = _get_cardpath_list(filepath, valid_ext=_method_map.keys())\n        for p in _card_paths:\n            _cards.update(read_cards(p, filter_tags=filter_tags, _cards=_cards))\n        return _cards\n\n    _ext = os.path.splitext(filepath)[1]\n    if _ext not in _method_map.keys():\n        raise ValueError(\"Unsupported file type: {}\".format(_ext))\n    _card_dict = _method_map[_ext](filepath)\n    _card_dict = _change_keys(_card_dict)\n    _card_dict[\"file\"] = filepath\n    _project_name = _card_dict[\"project\"].lower()\n    if _project_name in _cards:\n        raise ValueError(\n            f\"Names not unique from existing scenario projects: {_project_name}\"\n        )\n    if filter_tags and map(str.lower, _card_dict.get(\"tags\", [])).isdisjoint(\n        filter_tags\n    ):\n        CardLogger.debug(\n            f\"Skipping {_project_name} - no overlapping tags with {filter_tags}.\"\n        )\n        return _cards\n    _cards[_project_name] = ProjectCard(_card_dict)\n\n    return _cards\n</code></pre>"},{"location":"api/#projectcard.io.write_card","title":"<code>write_card(project_card, filename=None)</code>","text":"<p>Writes project card dictionary to YAML file</p> Source code in <code>projectcard/io.py</code> <pre><code>def write_card(project_card, filename: str = None):\n\"\"\"\n    Writes project card dictionary to YAML file\n    \"\"\"\n    if not filename:\n        filename = _make_slug(project_card.project) + \".yml\"\n    if not project_card.valid:\n        CardLogger.warning(f\"{project_card.project} Project Card not valid.\")\n    # import collections\n    # out_dict = collections.OrderedDict()\n    out_dict = {}\n    out_dict[\"project\"] = None\n    out_dict[\"tags\"] = \"\"\n    out_dict[\"dependencies\"] = \"\"\n    out_dict.update(project_card.__dict__)\n\n    with open(filename, \"w\") as outfile:\n        yaml.dump(out_dict, outfile, default_flow_style=False, sort_keys=False)\n\n    CardLogger.info(\"Wrote project card to: {}\".format(filename))\n</code></pre>"},{"location":"api/#projectcard.validate","title":"<code>projectcard.validate</code>","text":""},{"location":"api/#projectcard.validate.package_schema","title":"<code>package_schema(schema_path=PROJECTCARD_SCHEMA, outfile_path=None)</code>","text":"<p>Consolidates referenced schemas into a single schema and writes it out.</p> <p>Parameters:</p> Name Type Description Default <code>schema_path</code> <code>Union[Path, str]</code> <p>Schema to read int and package. Defaults to PROJECTCARD_SCHEMA.</p> <code>PROJECTCARD_SCHEMA</code> <code>outfile</code> <p>Where to write out packaged schema. Defaults to schema_path.basepath.packaged.json</p> required Source code in <code>projectcard/validate.py</code> <pre><code>def package_schema(\n    schema_path: Union[Path, str] = PROJECTCARD_SCHEMA,\n    outfile_path: Union[Path, str] = None,\n) -&gt; None:\n\"\"\"Consolidates referenced schemas into a single schema and writes it out.\n\n    Args:\n        schema_path: Schema to read int and package. Defaults to PROJECTCARD_SCHEMA.\n        outfile: Where to write out packaged schema. Defaults to schema_path.basepath.packaged.json\n    \"\"\"\n    schema_path = Path(schema_path)\n    _s_data = _load_schema(schema_path)\n    if outfile_path is None:\n        outfile_path = (\n            schema_path.parent / f\"{schema_path.stem}packaged.{schema_path.suffix}\"\n        )\n    outfile_path = Path(outfile_path)\n    with open(outfile_path, \"w\") as outfile:\n        json.dump(_s_data, outfile, indent=4)\n    CardLogger.info(f\"Wrote {schema_path.stem} to {outfile_path.stem}\")\n</code></pre>"},{"location":"api/#projectcard.validate.validate_card","title":"<code>validate_card(jsondata, schema_path=PROJECTCARD_SCHEMA)</code>","text":"<p>Validates json-like data to specified schema.</p> <p>Parameters:</p> Name Type Description Default <code>jsondata</code> <p>json-like data to validate.</p> required <code>schema</code> <p>schema to validate to, in json-schema format. Defaults to PROJECTCARD_SCHEMA.</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>description</p> <code>SchemaError</code> <p>description</p> Source code in <code>projectcard/validate.py</code> <pre><code>def validate_card(jsondata, schema_path=PROJECTCARD_SCHEMA):\n\"\"\"Validates json-like data to specified schema.\n\n    Args:\n        jsondata: json-like data to validate.\n        schema: schema to validate to, in json-schema format. Defaults to PROJECTCARD_SCHEMA.\n\n    Raises:\n        ValidationError: _description_\n        SchemaError: _description_\n    \"\"\"\n\n    CardLogger.debug(f\"Validating: {jsondata['project']}\")\n    try:\n        _schema_data = _load_schema(schema_path)\n        validate(jsondata, schema=_schema_data)\n    except ValidationError as e:\n        CardLogger.error(e)\n        raise ValidationError(f\"{e}\")\n    except SchemaError as e:\n        CardLogger.error(e)\n        raise SchemaError(f\"{e}\")\n    return True\n</code></pre>"},{"location":"schema/","title":"Project Card Schema","text":"<ul> <li>1. Property <code>Project Card Schema &gt; project</code></li> <li>2. Property <code>Project Card Schema &gt; changes</code></li> <li>2.1. Project Card Schema &gt; changes &gt; change.roadway_property_change.json<ul> <li>2.1.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; category</code></li> <li>2.1.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility</code></li> <li>2.1.2.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links</code><ul> <li>2.1.2.1.1. Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items</li> <li>2.1.2.1.1.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items &gt; oneOf &gt; item 0</code><ul> <li>2.1.2.1.1.1.1. The following properties are required</li> </ul> </li> <li>2.1.2.1.1.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items &gt; oneOf &gt; item 1</code><ul> <li>2.1.2.1.1.2.1. The following properties are required</li> </ul> </li> <li>2.1.2.1.1.3. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items &gt; oneOf &gt; item 2</code><ul> <li>2.1.2.1.1.3.1. The following properties are required</li> </ul> </li> </ul> </li> <li>2.1.2.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; A</code><ul> <li>2.1.2.2.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; A &gt; osm_node_id</code></li> <li>2.1.2.2.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; A &gt; model_node_id</code></li> </ul> </li> <li>2.1.2.3. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; B</code></li> <li>2.1.3. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; properties</code></li> </ul> </li> <li>3. Property <code>Project Card Schema &gt; notes</code></li> </ul> <p>Title: Project Card Schema</p> Type <code>object</code> Required No Additional properties [Any type: allowed] Property Pattern Type Deprecated Definition Title/Description + project No string No - - + changes No array No - - - notes No string No - -"},{"location":"schema/#1-property-project-card-schema-project","title":"1. Property <code>Project Card Schema &gt; project</code>","text":"Type <code>string</code> Required Yes"},{"location":"schema/#2-property-project-card-schema-changes","title":"2. Property <code>Project Card Schema &gt; changes</code>","text":"Type <code>array</code> Required Yes Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description change.roadway_property_change.json -"},{"location":"schema/#21-project-card-schema-changes-changeroadway_property_changejson","title":"2.1. Project Card Schema &gt; changes &gt; change.roadway_property_change.json","text":"Type <code>object</code> Required No Additional properties [Not allowed] Defined in defs/change.roadway_property_change.json Property Pattern Type Deprecated Definition Title/Description + category No string No - - + facility No object No In roadway.facility.json - + properties No object No In roadway.properties.json -"},{"location":"schema/#211-property-project-card-schema-changes-changes-items-category","title":"2.1.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; category</code>","text":"Type <code>string</code> Required Yes Restrictions Must match regular expression <code>roadway property change</code> Test"},{"location":"schema/#212-property-project-card-schema-changes-changes-items-facility","title":"2.1.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility</code>","text":"Type <code>object</code> Required Yes Additional properties [Not allowed] Defined in roadway.facility.json Property Pattern Type Deprecated Definition Title/Description + links No array No In roadway.links.json - + A No object No In roadway.node.json - + B No object No Same as A -"},{"location":"schema/#2121-property-project-card-schema-changes-changes-items-facility-links","title":"2.1.2.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links</code>","text":"Type <code>array</code> Required Yes Defined in roadway.links.json Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description links items -"},{"location":"schema/#21211-project-card-schema-changes-changes-items-facility-links-links-items","title":"2.1.2.1.1. Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items","text":"Type <code>combining</code> Required No Additional properties [Any type: allowed] One of(Option) item 0 item 1 item 2"},{"location":"schema/#212111-property-project-card-schema-changes-changes-items-facility-links-links-items-oneof-item-0","title":"2.1.2.1.1.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items &gt; oneOf &gt; item 0</code>","text":"Type <code>object</code> Required No Additional properties [Any type: allowed]"},{"location":"schema/#2121111-the-following-properties-are-required","title":"2.1.2.1.1.1.1. The following properties are required","text":"<ul> <li>name</li> </ul>"},{"location":"schema/#212112-property-project-card-schema-changes-changes-items-facility-links-links-items-oneof-item-1","title":"2.1.2.1.1.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items &gt; oneOf &gt; item 1</code>","text":"Type <code>object</code> Required No Additional properties [Any type: allowed]"},{"location":"schema/#2121121-the-following-properties-are-required","title":"2.1.2.1.1.2.1. The following properties are required","text":"<ul> <li>osm_link_id</li> </ul>"},{"location":"schema/#212113-property-project-card-schema-changes-changes-items-facility-links-links-items-oneof-item-2","title":"2.1.2.1.1.3. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; links &gt; links items &gt; oneOf &gt; item 2</code>","text":"Type <code>object</code> Required No Additional properties [Any type: allowed]"},{"location":"schema/#2121131-the-following-properties-are-required","title":"2.1.2.1.1.3.1. The following properties are required","text":"<ul> <li>model_link_id</li> </ul>"},{"location":"schema/#2122-property-project-card-schema-changes-changes-items-facility-a","title":"2.1.2.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; A</code>","text":"Type <code>object</code> Required Yes Additional properties [Not allowed] Defined in roadway.node.json Property Pattern Type Deprecated Definition Title/Description - osm_node_id No string No - - - model_node_id No number or string No - -"},{"location":"schema/#21221-property-project-card-schema-changes-changes-items-facility-a-osm_node_id","title":"2.1.2.2.1. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; A &gt; osm_node_id</code>","text":"Type <code>string</code> Required No"},{"location":"schema/#21222-property-project-card-schema-changes-changes-items-facility-a-model_node_id","title":"2.1.2.2.2. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; A &gt; model_node_id</code>","text":"Type <code>number or string</code> Required No"},{"location":"schema/#2123-property-project-card-schema-changes-changes-items-facility-b","title":"2.1.2.3. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; facility &gt; B</code>","text":"Type <code>object</code> Required Yes Additional properties [Not allowed] Same definition as A"},{"location":"schema/#213-property-project-card-schema-changes-changes-items-properties","title":"2.1.3. Property <code>Project Card Schema &gt; changes &gt; changes items &gt; properties</code>","text":"Type <code>object</code> Required Yes Additional properties [Any type: allowed] Defined in roadway.properties.json"},{"location":"schema/#3-property-project-card-schema-notes","title":"3. Property <code>Project Card Schema &gt; notes</code>","text":"Type <code>string</code> Required No <p>Generated using json-schema-for-humans on 2023-03-13 at 14:55:14 +0000</p>"}]}